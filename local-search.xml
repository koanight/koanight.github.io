<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>淺斟集·代序</title>
    <link href="/gibberish/tipsy/Preface/"/>
    <url>/gibberish/tipsy/Preface/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>    也許是終於將博客搭好，也許純粹因爲年紀上來，將平日偶爾寫的細碎東西整理在一起，算是我今年想做好的一件事。</p><p>    真的要算起來，從初高中寫起，哪怕沒有十萬也有個七、八萬字：詩詞歌賦、散文評論、隨筆小説，還是挺雜糅的，不過都被自己刪去，所剩無幾，原因只是回頭翻閲時不忍細看。大學看高中的如此，工作后看大學亦如是，每個階段看之前的，都不對勁。現在要解決這個問題的方法也簡單，眼不見心不煩，反正寫完傳到github，有錯別字也不管不顧——沒有必要再commit一次。</p><p>    “淺斟”二字，自然是從柳三變的《鶴衝天》來的，當然我也沒有什麽浮名可以拿來換的，也就能在回到家中時，在縮于被窩時，在愜意休憩時，在愉快活動時，倒一小杯酒淺嘗輒止。其次，也包含著五柳先生的點到即止、不求甚解——如果事事都去反復思量，考慮今是昨非，那豈不是給庸人自擾？</p><p>    風過留聲，雁過留痕，人活著總要留下點什麽。無錢無名，無權無人，也就這些零落如鴻爪的隻言片語，供諸君一饗——或是一哂。</p><hr /><p align="right"> 腹稿于壬寅葭月 </p><p align="right"> 完稿于壬寅冰月 </p>]]></content>
    
    
    <categories>
      
      <category>胡言亂語</category>
      
      <category>淺斟集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/study/others/My-Hexo/"/>
    <url>/study/others/My-Hexo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="git"><a class="markdownIt-Anchor" href="#git"></a> git</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><div class="code-wrapper"><pre><code class="hljs bash"> apt/yum/dnf install git -y</code></pre></div><h1 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> nodejs</h1><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><div class="code-wrapper"><pre><code class="hljs bash">wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz</code></pre></div><h2 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h2><div class="code-wrapper"><pre><code class="hljs bash">tar xf node-v18.12.1-linux-x64.tar.xz -C /opt</code></pre></div><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PATH=\$PATH:/opt/node-v18.12.1-linux-x64&quot;</span> &gt;&gt; /etc/profile. /etc/profile</code></pre></div><h2 id="添加淘宝源"><a class="markdownIt-Anchor" href="#添加淘宝源"></a> 添加淘宝源</h2><div class="code-wrapper"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com</code></pre></div><h1 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> hexo</h1><h2 id="安装脚手架"><a class="markdownIt-Anchor" href="#安装脚手架"></a> 安装脚手架</h2><div class="code-wrapper"><pre><code class="hljs bash">npm i -g hexo-cli</code></pre></div><h2 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opthexo init hexonpm i</code></pre></div><h2 id="参考文档修改_configyml"><a class="markdownIt-Anchor" href="#参考文档修改_configyml"></a> 参考文档修改_config.yml</h2><p><a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a></p><h2 id="修改模板字段"><a class="markdownIt-Anchor" href="#修改模板字段"></a> 修改模板字段</h2><div class="code-wrapper"><pre><code class="hljs bash">vim scaffolds/post.md 添加以下内容    categories:</code></pre></div><h2 id="自行切换主题并参考主题说明修改相应配置"><a class="markdownIt-Anchor" href="#自行切换主题并参考主题说明修改相应配置"></a> 自行切换主题并参考主题说明修改相应配置</h2><h1 id="command"><a class="markdownIt-Anchor" href="#command"></a> command</h1><p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p><h1 id="release"><a class="markdownIt-Anchor" href="#release"></a> release</h1><h2 id="pm2"><a class="markdownIt-Anchor" href="#pm2"></a> pm2</h2><h3 id="安装pm2"><a class="markdownIt-Anchor" href="#安装pm2"></a> 安装pm2</h3><div class="code-wrapper"><pre><code class="hljs bash">npm i -g pm2</code></pre></div><h3 id="编写脚本"><a class="markdownIt-Anchor" href="#编写脚本"></a> 编写脚本</h3><h4 id="hexo-deployjs"><a class="markdownIt-Anchor" href="#hexo-deployjs"></a> hexo-deploy.js</h4><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//deploy</span><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo g -d (-w 用户监控文件改动情况自动发布)&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span>(error)&#123;                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)                <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);&#125;)</code></pre></div><h4 id="hexo-runjs"><a class="markdownIt-Anchor" href="#hexo-runjs"></a> hexo-run.js</h4><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//run</span><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo s (-p 80 用户指定端口)&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span>(error)&#123;                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)                <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);&#125;)</code></pre></div><h3 id="启动后台任务"><a class="markdownIt-Anchor" href="#启动后台任务"></a> 启动后台任务</h3><div class="code-wrapper"><pre><code class="hljs bash">pm2 start hexo-deploy.jspm2 start hexo-run.js</code></pre></div><p><strong>注：使用nginx发布时，不需要使用pm2启动hexo-run.js或者通过hexo s发布</strong></p><h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> nginx</h2><h3 id="安装nginx"><a class="markdownIt-Anchor" href="#安装nginx"></a> 安装nginx</h3><div class="code-wrapper"><pre><code class="hljs bash">apt/yum/dnf install nginx -y</code></pre></div><h3 id="添加路由配置"><a class="markdownIt-Anchor" href="#添加路由配置"></a> 添加路由配置</h3><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">root</span> /opt/hexo/public;<span class="hljs-section">location</span> / &#123;   <span class="hljs-attribute">index</span> index.html;&#125;</code></pre></div><h3 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx"></a> 启动nginx</h3><div class="code-wrapper"><pre><code class="hljs bash">systemctl start nginx</code></pre></div><p><strong>可以使用pm2后台控制hexo的构建，nginx配置路由及https证书</strong></p><h2 id="github-page"><a class="markdownIt-Anchor" href="#github-page"></a> github page</h2><h3 id="生成密钥"><a class="markdownIt-Anchor" href="#生成密钥"></a> 生成密钥</h3><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C github邮箱地址<span class="hljs-built_in">cat</span> id_rsa.pub</code></pre></div><h3 id="在github页码中配置密钥"><a class="markdownIt-Anchor" href="#在github页码中配置密钥"></a> 在github页码中配置密钥</h3><h3 id="安装插件"><a class="markdownIt-Anchor" href="#安装插件"></a> 安装插件</h3><div class="code-wrapper"><pre><code class="hljs bash">npm i hexo-deployer-git --save</code></pre></div><h3 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h3><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span>  <span class="hljs-comment"># ssh地址</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">&lt;branch</span> <span class="hljs-string">name&gt;</span>   <span class="hljs-comment"># master</span></code></pre></div><h3 id="配置git信息"><a class="markdownIt-Anchor" href="#配置git信息"></a> 配置git信息</h3><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;github用户名&quot;</span>git config --global user.email <span class="hljs-string">&quot;github邮箱地址&quot;</span></code></pre></div><h3 id="构建发布"><a class="markdownIt-Anchor" href="#构建发布"></a> 构建发布</h3><div class="code-wrapper"><pre><code class="hljs bash">hexo cleanhexo g -d</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>手动部署Train版OpenStack</title>
    <link href="/study/others/Openstack-Train/"/>
    <url>/study/others/Openstack-Train/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="enviroment"><a class="markdownIt-Anchor" href="#enviroment"></a> Enviroment</h1><table><thead><tr><th style="text-align:center">hostname</th><th style="text-align:center">os</th><th style="text-align:center">static ip</th><th style="text-align:center">role</th></tr></thead><tbody><tr><td style="text-align:center">controller</td><td style="text-align:center">centos7.8</td><td style="text-align:center">网卡1Nat模式静态10.10.10.101；网卡2仅主机模式不设IP，网关地址192.168.40.1</td><td style="text-align:center">主控</td></tr><tr><td style="text-align:center">computer</td><td style="text-align:center">centos7.8</td><td style="text-align:center">网卡1Nat模式静态10.10.10.102；网卡2仅主机模式不设IP，网关地址192.168.40.1</td><td style="text-align:center">计算</td></tr><tr><td style="text-align:center">block</td><td style="text-align:center">centos7.8</td><td style="text-align:center">10.10.10.103</td><td style="text-align:center">块储存，双硬盘</td></tr></tbody></table><h1 id="prerequisites"><a class="markdownIt-Anchor" href="#prerequisites"></a> Prerequisites</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭防火墙</span>systemctl stop firewalld<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用防火墙，重启生效</span>systemctl disable firewalld<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭selinux</span>setenforce 0<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用selinux,重启生效</span>sed -i &quot;s/enforcing/disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装常用软件包</span>yum install vim net-tools lrzsz unzip dos2unix telnet sysstat iotop pciutils lsof tcpdump psmisc bc wget socat gcc tree chrony ntpdate -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机名写入hosts</span>sed -i &#x27;$a\10.10.10.101 controller\n10.10.10.102 compute\n10.10.10.103 block&#x27; /etc/hosts<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机间配置ssh免密登录</span>ssh-keygen -t rsafor host in master backup node ; do ssh-copy-id -i ~/.ssh/id_rsa.pub $host;done</code></pre></div><h2 id="network-time-protoco"><a class="markdownIt-Anchor" href="#network-time-protoco"></a> <a href="https://docs.openstack.org/install-guide/environment-ntp.html#">Network Time Protoco</a></h2><h3 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> controller</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install chrony -yvim /etc/chrony.confallow 10.10.0.0/16 (主控节点网段)for op in enable restart status;do systemctl $op chronyd;done</code></pre></div><h3 id="computerblock"><a class="markdownIt-Anchor" href="#computerblock"></a> computer,block</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install chrony -yvim /etc/chrony.confserver controller iburstfor op in enable restart status;do systemctl $op chronyd;done</code></pre></div><h2 id="openstack-packages"><a class="markdownIt-Anchor" href="#openstack-packages"></a> <a href="https://docs.openstack.org/install-guide/environment-packages.html#">OpenStack packages</a></h2><div class="code-wrapper"><pre><code class="hljs shell">yum list centos-release-openstack*yum install centos-release-openstack-train -yyum upgrade -yyum install python-openstackclient openstack-selinux -y</code></pre></div><h2 id="sql-database"><a class="markdownIt-Anchor" href="#sql-database"></a> <a href="https://docs.openstack.org/install-guide/environment-sql-database.html">SQL database</a></h2><div class="code-wrapper"><pre><code class="hljs shell">yum install mariadb mariadb-server python2-PyMySQL -yvim /etc/my.cnf.d/openstack.conf[mysqld]bind-address = 10.10.10.101default-storage-engine = innodbinnodb_file_per_table = onmax_connections = 4096collation-server = utf8_general_cicharacter-set-server = utf8for op in enable start status;do systemctl $op mariadb;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">数据库初始化，需要设置密码</span>mysql_secure_installation</code></pre></div><h2 id="message-queue"><a class="markdownIt-Anchor" href="#message-queue"></a> <a href="https://docs.openstack.org/install-guide/environment-messaging.html">Message queue</a></h2><div class="code-wrapper"><pre><code class="hljs shell">yum install rabbitmq-server -yfor op in enable start status;do systemctl $op rabbitmq-server;donerabbitmqctl add_user openstack openstackrabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装可视化插件</span>rabbitmq-plugins enable rabbitmq-managementsystemctl restart rabbitmq-server<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">访问http://主控节点IP:15672/，登录账户guest/guest，将刚建的openstack用户加入到管理组</span></code></pre></div><h2 id="memcached"><a class="markdownIt-Anchor" href="#memcached"></a> <a href="https://docs.openstack.org/install-guide/environment-memcached.html">Memcached</a></h2><div class="code-wrapper"><pre><code class="hljs shell">yum install memcached python-memcached -ysed -i &#x27;s/127.0.0.1/10.10.10.101/&#x27; /etc/sysconfig/memcachedfor op in enable start status;do systemctl $op memcached;done</code></pre></div><h2 id="etcd"><a class="markdownIt-Anchor" href="#etcd"></a> <a href="https://docs.openstack.org/install-guide/environment-etcd.html">Etcd</a></h2><div class="code-wrapper"><pre><code class="hljs shell">yum install etcd -yvim /etc/etcd/etcd.conf<span class="hljs-meta prompt_">#</span><span class="language-bash">[Member]</span>ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;http://10.10.10.101:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;http://10.10.10.101:2379&quot;ETCD_NAME=&quot;controller&quot;<span class="hljs-meta prompt_">#</span><span class="language-bash">[Clustering]</span>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://10.10.10.101:2380&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;http://10.10.10.101:2379&quot;ETCD_INITIAL_CLUSTER=&quot;controller=http://10.10.10.101:2380&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-01&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;for op in enable start status;do systemctl $op etcd;done</code></pre></div><h1 id="keystone-installation-for-train"><a class="markdownIt-Anchor" href="#keystone-installation-for-train"></a> <a href="https://docs.openstack.org/keystone/train/install/">Keystone installation for Train</a></h1><h2 id="prerequisites-2"><a class="markdownIt-Anchor" href="#prerequisites-2"></a> Prerequisites</h2><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE keystone;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;keystone&#x27;;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;keystone&#x27;;exit;</code></pre></div><h2 id="install-and-configure-components"><a class="markdownIt-Anchor" href="#install-and-configure-components"></a> Install and configure components</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-keystone httpd mod_wsgi -ycp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bakvim /etc/keystone/keystone.conf[database]connection = mysql+pymysql://keystone:keystone@controller/keystone[token]provider = fernetsu -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystonekeystone-manage fernet_setup --keystone-user keystone --keystone-group keystonekeystone-manage credential_setup --keystone-user keystone --keystone-group keystonekeystone-manage bootstrap --bootstrap-password admin(管理员密码) \  --bootstrap-admin-url http://controller:5000/v3/ \  --bootstrap-internal-url http://controller:5000/v3/ \  --bootstrap-public-url http://controller:5000/v3/ \  --bootstrap-region-id RegionOne</code></pre></div><h2 id="configure-the-apache-http-server"><a class="markdownIt-Anchor" href="#configure-the-apache-http-server"></a> Configure the Apache HTTP server</h2><div class="code-wrapper"><pre><code class="hljs shell">vim /etc/httpd/conf/httpd.confServerName controller(主机名)ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</code></pre></div><h2 id="finalize-the-installation"><a class="markdownIt-Anchor" href="#finalize-the-installation"></a> Finalize the installation</h2><div class="code-wrapper"><pre><code class="hljs shell">for op in enable start status;do systemctl $op httpd;donevim admin-openrcexport OS_USERNAME=adminexport OS_PASSWORD=Aadmin(管理员密码)export OS_PROJECT_NAME=adminexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3source admin-openrc</code></pre></div><h2 id="create-a-domain-projects-users-and-roles"><a class="markdownIt-Anchor" href="#create-a-domain-projects-users-and-roles"></a> Create a domain, projects, users, and roles</h2><div class="code-wrapper"><pre><code class="hljs shell">openstack domain create --description &quot;An Example Domain&quot; exampleopenstack project create --domain default \  --description &quot;Service Project&quot; serviceopenstack project create --domain default \  --description &quot;Demo Project&quot; myproject<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置普通用户密码</span>openstack user create --domain default \  --password-prompt myuseropenstack role create myroleopenstack role add --project myproject --user myuser myrole</code></pre></div><h2 id="verify-operation"><a class="markdownIt-Anchor" href="#verify-operation"></a> Verify operation</h2><div class="code-wrapper"><pre><code class="hljs shell">unset OS_AUTH_URL OS_PASSWORDopenstack --os-auth-url http://controller:5000/v3 \  --os-project-domain-name Default --os-user-domain-name Default \  --os-project-name admin --os-username admin token issueopenstack --os-auth-url http://controller:5000/v3 \  --os-project-domain-name Default --os-user-domain-name Default \  --os-project-name myproject --os-username myuser token issuevim demo-openrcexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=myprojectexport OS_USERNAME=myuserexport OS_PASSWORD=demo(普通用户密码)export OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看普通用户token信息</span>source demo-openrcopenstack token issue<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看管理员token信息</span>source admin-openrcopenstack token issue</code></pre></div><h1 id="glance-installation-for-train"><a class="markdownIt-Anchor" href="#glance-installation-for-train"></a> <a href="https://docs.openstack.org/glance/train/install/">Glance installation for Train</a></h1><h2 id="prerequisites-3"><a class="markdownIt-Anchor" href="#prerequisites-3"></a> Prerequisites</h2><h3 id="create-database"><a class="markdownIt-Anchor" href="#create-database"></a> Create Database</h3><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE glance;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;glance&#x27;;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;glance&#x27;;exit;</code></pre></div><h3 id="configure-user-and-endpoints"><a class="markdownIt-Anchor" href="#configure-user-and-endpoints"></a> Configure User and Endpoints</h3><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置glance用户密码</span>openstack user create --domain default --password-prompt glanceopenstack role add --project service --user glance adminopenstack service create --name glance \  --description &quot;OpenStack Image&quot; imageopenstack endpoint create --region RegionOne \  image public http://controller:9292  openstack endpoint create --region RegionOne \  image internal http://controller:9292  openstack endpoint create --region RegionOne \  image admin http://controller:9292</code></pre></div><h2 id="install-and-configure-components-2"><a class="markdownIt-Anchor" href="#install-and-configure-components-2"></a> Install and configure components</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-glance -ycp /etc/glance/glance-api.conf /etc/glance/glance-api.conf.bakvim /etc/glance/glance-api.conf[database]connection = mysql+pymysql://glance:glance@controller/glance[keystone_authtoken]www_authenticate_uri  = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = glancepassword = glance(glance用户密码)[paste_deploy]flavor = keystone[glance_store]stores = file,httpdefault_store = filefilesystem_store_datadir = /var/lib/glance/images/su -s /bin/sh -c &quot;glance-manage db_sync&quot; glancefor op in enable start status;do systemctl $op openstack-glance-api;done</code></pre></div><h2 id="verify-operation-2"><a class="markdownIt-Anchor" href="#verify-operation-2"></a> Verify operation</h2><div class="code-wrapper"><pre><code class="hljs shell">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.imgglance image-create --name &quot;cirros&quot; \  --file cirros-0.4.0-x86_64-disk.img \  --disk-format qcow2 --container-format bare \  --visibility publicglance image-create --name &quot;Centos7&quot; \  --file CentOS-7-x86_64-GenericCloud-2003.qcow2c \  --disk-format qcow2 --container-format bare \  --visibility publicopenstack images list</code></pre></div><h1 id="placement-installation-for-train"><a class="markdownIt-Anchor" href="#placement-installation-for-train"></a> <a href="https://docs.openstack.org/placement/train/install/">Placement installation for Train</a></h1><h2 id="prerequisites-4"><a class="markdownIt-Anchor" href="#prerequisites-4"></a> Prerequisites</h2><h3 id="create-database-2"><a class="markdownIt-Anchor" href="#create-database-2"></a> Create Database</h3><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE placement;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;placement&#x27;;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;placement&#x27;;exit</code></pre></div><h3 id="configure-user-and-endpoints-2"><a class="markdownIt-Anchor" href="#configure-user-and-endpoints-2"></a> Configure User and Endpoints</h3><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置placement用户密码</span>openstack user create --domain default --password-prompt placementopenstack role add --project service --user placement adminopenstack service create --name placement \  --description &quot;Placement API&quot; placementopenstack endpoint create --region RegionOne \  placement public http://controller:8778openstack endpoint create --region RegionOne \  placement internal http://controller:8778openstack endpoint create --region RegionOne \  placement admin http://controller:8778</code></pre></div><h2 id="install-and-configure-components-3"><a class="markdownIt-Anchor" href="#install-and-configure-components-3"></a> Install and configure components</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-placement-api -ycp /etc/placement/placement.conf /etc/placement/placement.conf.bakvim /etc/placement/placement.conf[placement_database]connection = mysql+pymysql://placement:placement@controller/placement[api]auth_strategy = keystone[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = placementpassword = placement(placement用户密码)su -s /bin/sh -c &quot;placement-manage db sync&quot; placementsystemctl restart httpd &amp; systemctl status httpd</code></pre></div><h2 id="verify-operation-3"><a class="markdownIt-Anchor" href="#verify-operation-3"></a> Verify operation</h2><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrcplacement-status upgrade checkyum install epel-release -yyum install -y python-pippip install --upgrade pippip install osc-placementopenstack --os-placement-api-version 1.2 resource class list --sort-column nameopenstack --os-placement-api-version 1.6 trait list --sort-column name</code></pre></div><h1 id="nova-installation-for-train"><a class="markdownIt-Anchor" href="#nova-installation-for-train"></a> <a href="https://docs.openstack.org/nova/train/install/">Nova installation for Train</a></h1><h2 id="controller-2"><a class="markdownIt-Anchor" href="#controller-2"></a> controller</h2><h3 id="prerequisites-5"><a class="markdownIt-Anchor" href="#prerequisites-5"></a> Prerequisites</h3><h4 id="create-database-3"><a class="markdownIt-Anchor" href="#create-database-3"></a> Create Database</h4><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE nova_api;CREATE DATABASE nova;CREATE DATABASE nova_cell0;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;nova&#x27;;exit;</code></pre></div><h4 id="configure-user-and-endpoints-3"><a class="markdownIt-Anchor" href="#configure-user-and-endpoints-3"></a> Configure User and Endpoints</h4><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置nova用户密码</span>openstack user create --domain default --password-prompt novaopenstack role add --project service --user nova adminopenstack service create --name nova \  --description &quot;OpenStack Compute&quot; computeopenstack endpoint create --region RegionOne \  compute public http://controller:8774/v2.1openstack endpoint create --region RegionOne \  compute internal http://controller:8774/v2.1openstack endpoint create --region RegionOne \  compute admin http://controller:8774/v2.1</code></pre></div><h3 id="install-and-configure-components-4"><a class="markdownIt-Anchor" href="#install-and-configure-components-4"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-nova-api openstack-nova-conductor \  openstack-nova-novncproxy openstack-nova-scheduler -ycp /etc/nova/nova.conf /etc/nova/nova.conf.bakvim /etc/nova/nova.conf[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:openstack@controller:5672/my_ip = 10.10.10.101(主控节点IP)use_neutron = truefirewall_driver = nova.virt.firewall.NoopFirewallDriver[api_database]connection = mysql+pymysql://nova:nova@controller/nova_api[database]connection = mysql+pymysql://nova:nova@controller/nova[api]auth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller:5000/auth_url = http://controller:5000/memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword = nova(nova用户密码)[vnc]enabled = trueserver_listen = $my_ipserver_proxyclient_address = $my_ip[glance]api_servers = http://controller:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = placement(placement用户密码)[scheduler]discover_hosts_in_cells_interval = 300vim /etc/httpd/conf.d/00-nova-placement-api.conf&lt;Directory /usr/bin&gt;   &lt;IfVersion &gt;= 2.4&gt;      Require all granted   &lt;/IfVersion&gt;   &lt;IfVersion &lt; 2.4&gt;      Order allow,deny      Allow from all   &lt;/IfVersion&gt;&lt;/Directory&gt;su -s /bin/sh -c &quot;nova-manage api_db sync&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; novasu -s /bin/sh -c &quot;nova-manage db sync&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; novafor op in enable satrt status;do for service in openstack-nova-api openstack-nova-scheduler openstack-nova-conductor openstack-nova-novncproxy;do systemctl $op $service;done;done</code></pre></div><h2 id="compute"><a class="markdownIt-Anchor" href="#compute"></a> compute</h2><h3 id="install-and-configure-components-5"><a class="markdownIt-Anchor" href="#install-and-configure-components-5"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-nova-compute libvirt -ycp /etc/nova/nova.conf /etc/nova/nova.conf.bakvim /etc/nova/nova.conf[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:openstack@controllermy_ip = 10.10.10.102(计算节点IP)use_neutron = truefirewall_driver = nova.virt.firewall.NoopFirewallDriver[api]auth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller:5000/auth_url = http://controller:5000/memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword = nova(nova用户密码)[vnc]enabled = trueserver_listen = 0.0.0.0server_proxyclient_address = $my_ipnovncproxy_base_url = http://controller:6080/vnc_auto.html[glance]api_servers = http://controller:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = placement(placement用户密码)[libvirt]cpu_mode = nonevirt_type=qemufor op in enable satrt status;do for service in libvirtd openstack-nova-compute;do systemctl $op $service;done;done</code></pre></div><h2 id="controller-3"><a class="markdownIt-Anchor" href="#controller-3"></a> controller</h2><h3 id="verify-operation-4"><a class="markdownIt-Anchor" href="#verify-operation-4"></a> Verify operation</h3><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrcopenstack compute service listsu -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</code></pre></div><h1 id="neutron-installation-for-train"><a class="markdownIt-Anchor" href="#neutron-installation-for-train"></a> <a href="https://docs.openstack.org/neutron/train/install/">Neutron installation for Train</a></h1><h2 id="controller-4"><a class="markdownIt-Anchor" href="#controller-4"></a> controller</h2><h3 id="prerequisites-6"><a class="markdownIt-Anchor" href="#prerequisites-6"></a> Prerequisites</h3><h4 id="create-database-4"><a class="markdownIt-Anchor" href="#create-database-4"></a> Create Database</h4><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE neutron;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;neutron&#x27;;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;neutron&#x27;;exit;</code></pre></div><h4 id="configure-user-and-endpoints-4"><a class="markdownIt-Anchor" href="#configure-user-and-endpoints-4"></a> Configure User and Endpoints</h4><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置neutron用户密码</span>openstack user create --domain default --password-prompt neutronopenstack role add --project service --user neutron adminopenstack service create --name neutron \  --description &quot;OpenStack Networking&quot; networkopenstack endpoint create --region RegionOne \  network public http://controller:9696openstack endpoint create --region RegionOne \  network internal http://controller:9696openstack endpoint create --region RegionOne \  network admin http://controller:9696</code></pre></div><h3 id="install-and-configure-components-6"><a class="markdownIt-Anchor" href="#install-and-configure-components-6"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-neutron openstack-neutron-ml2 \  openstack-neutron-linuxbridge ebtables -y</code></pre></div><h4 id="provider-networks"><a class="markdownIt-Anchor" href="#provider-networks"></a> <a href="https://docs.openstack.org/neutron/train/install/controller-install-option1-rdo.html">Provider networks</a></h4><h5 id="vim-etcneutronneutronconf"><a class="markdownIt-Anchor" href="#vim-etcneutronneutronconf"></a> vim /etc/neutron/neutron.conf</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[database]</span><span class="hljs-attr">connection</span> = <span class="hljs-string">mysql+pymysql://neutron:neutron@controller/neutron</span><span class="hljs-attr">[DEFAULT]</span><span class="hljs-attr">core_plugin</span> = <span class="hljs-string">ml2</span><span class="hljs-attr">service_plugins</span> =<span class="hljs-string"></span><span class="hljs-attr">transport_url</span> = <span class="hljs-string">rabbit://openstack:openstack@controller</span><span class="hljs-attr">auth_strategy</span> = <span class="hljs-string">keystone</span><span class="hljs-attr">notify_nova_on_port_status_changes</span> = <span class="hljs-string">true</span><span class="hljs-attr">notify_nova_on_port_data_changes</span> = <span class="hljs-string">true</span><span class="hljs-attr">[keystone_authtoken]</span><span class="hljs-attr">www_authenticate_uri</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">auth_url</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">memcached_servers</span> = <span class="hljs-string">controller:11211</span><span class="hljs-attr">auth_type</span> = <span class="hljs-string">password</span><span class="hljs-attr">project_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">user_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">project_name</span> = <span class="hljs-string">service</span><span class="hljs-attr">username</span> = <span class="hljs-string">neutron</span><span class="hljs-attr">password</span> = <span class="hljs-string">neutron(neutron用户密码)</span><span class="hljs-attr">[nova]</span><span class="hljs-attr">auth_url</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">auth_type</span> = <span class="hljs-string">password</span><span class="hljs-attr">project_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">user_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">region_name</span> = <span class="hljs-string">RegionOne</span><span class="hljs-attr">project_name</span> = <span class="hljs-string">service</span><span class="hljs-attr">username</span> = <span class="hljs-string">nova</span><span class="hljs-attr">password</span> = <span class="hljs-string">nova(nova用户密码)</span><span class="hljs-attr">[oslo_concurrency]</span><span class="hljs-attr">lock_path</span> = <span class="hljs-string">/var/lib/neutron/tmp</span></code></pre></div><h5 id="vim-etcneutronpluginsml2ml2_confini"><a class="markdownIt-Anchor" href="#vim-etcneutronpluginsml2ml2_confini"></a> vim /etc/neutron/plugins/ml2/ml2_conf.ini</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[ml2]</span><span class="hljs-attr">type_drivers</span> = <span class="hljs-string">flat,vlan</span><span class="hljs-attr">tenant_network_types</span> =<span class="hljs-string"></span><span class="hljs-attr">mechanism_drivers</span> = <span class="hljs-string">linuxbridge</span><span class="hljs-attr">extension_drivers</span> = <span class="hljs-string">port_security</span><span class="hljs-attr">[ml2_type_flat]</span><span class="hljs-attr">flat_networks</span> = <span class="hljs-string">provider</span><span class="hljs-attr">[securitygroup]</span><span class="hljs-attr">enable_ipset</span> = <span class="hljs-string">true</span></code></pre></div><h5 id="vim-etcneutronpluginsml2linuxbridge_agentini"><a class="markdownIt-Anchor" href="#vim-etcneutronpluginsml2linuxbridge_agentini"></a> vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[linux_bridge]</span><span class="hljs-attr">physical_interface_mappings</span> = <span class="hljs-string">provider:ens33(服务器网络接口名)</span><span class="hljs-attr">[vxlan]</span><span class="hljs-attr">enable_vxlan</span> = <span class="hljs-string">false</span><span class="hljs-attr">[securitygroup]</span><span class="hljs-attr">enable_security_group</span> = <span class="hljs-string">true</span><span class="hljs-attr">firewall_driver</span> = <span class="hljs-string">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span></code></pre></div><h5 id="edit-kernel-supports"><a class="markdownIt-Anchor" href="#edit-kernel-supports"></a> edit kernel supports</h5><div class="code-wrapper"><pre><code class="hljs shell">modprobe br_netfiltervim /etc/sysctl.confnet.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1sysctl -p</code></pre></div><h5 id="vim-etcneutrondhcp_agentini"><a class="markdownIt-Anchor" href="#vim-etcneutrondhcp_agentini"></a> vim /etc/neutron/dhcp_agent.ini</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[DEFAULT]</span><span class="hljs-attr">interface_driver</span> = <span class="hljs-string">linuxbridge</span><span class="hljs-attr">dhcp_driver</span> = <span class="hljs-string">neutron.agent.linux.dhcp.Dnsmasq</span><span class="hljs-attr">enable_isolated_metadata</span> = <span class="hljs-string">true</span></code></pre></div><h5 id="vim-etcneutronmetadata_agentini"><a class="markdownIt-Anchor" href="#vim-etcneutronmetadata_agentini"></a> vim /etc/neutron/metadata_agent.ini</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[DEFAULT]</span><span class="hljs-attr">nova_metadata_host</span> = <span class="hljs-string">controller</span><span class="hljs-attr">metadata_proxy_shared_secret</span> = <span class="hljs-string">metadata(网络共享密码)</span></code></pre></div><h5 id="vim-etcnovanovaconf"><a class="markdownIt-Anchor" href="#vim-etcnovanovaconf"></a> vim /etc/nova/nova.conf</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[neutron]</span><span class="hljs-attr">auth_url</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">auth_type</span> = <span class="hljs-string">password</span><span class="hljs-attr">project_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">user_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">region_name</span> = <span class="hljs-string">RegionOne</span><span class="hljs-attr">project_name</span> = <span class="hljs-string">service</span><span class="hljs-attr">username</span> = <span class="hljs-string">neutron</span><span class="hljs-attr">password</span> = <span class="hljs-string">neutron(neutron用户密码)</span><span class="hljs-attr">service_metadata_proxy</span> = <span class="hljs-string">true</span><span class="hljs-attr">metadata_proxy_shared_secret</span> = <span class="hljs-string">metadata(网络共享密码)</span></code></pre></div><h3 id="finalize-installation"><a class="markdownIt-Anchor" href="#finalize-installation"></a> Finalize installation</h3><div class="code-wrapper"><pre><code class="hljs shell">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.inisu -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutronsystemctl restart openstack-nova-api.servicefor op in enable start status;do for service in neutron-server neutron-linuxbridge-agent neutron-dhcp-agent neutron-metadata-agent;do systemctl $op $servicel;done;donefor op in enable start status;do systemctl $op neutron-l3-agent;done</code></pre></div><h2 id="compute-2"><a class="markdownIt-Anchor" href="#compute-2"></a> compute</h2><h3 id="install-and-configure-components-7"><a class="markdownIt-Anchor" href="#install-and-configure-components-7"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-neutron-linuxbridge ebtables ipset -y</code></pre></div><h4 id="vim-etcneutronneutronconf-2"><a class="markdownIt-Anchor" href="#vim-etcneutronneutronconf-2"></a> vim /etc/neutron/neutron.conf</h4><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[DEFAULT]</span><span class="hljs-attr">transport_url</span> = <span class="hljs-string">rabbit://openstack:openstack@controller</span><span class="hljs-attr">auth_strategy</span> = <span class="hljs-string">keystone</span><span class="hljs-attr">[keystone_authtoken]</span><span class="hljs-attr">www_authenticate_uri</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">auth_url</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">memcached_servers</span> = <span class="hljs-string">controller:11211</span><span class="hljs-attr">auth_type</span> = <span class="hljs-string">password</span><span class="hljs-attr">project_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">user_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">project_name</span> = <span class="hljs-string">service</span><span class="hljs-attr">username</span> = <span class="hljs-string">neutron</span><span class="hljs-attr">password</span> = <span class="hljs-string">neutron(neutron用户密码)</span><span class="hljs-attr">[oslo_concurrency]</span><span class="hljs-attr">lock_path</span> = <span class="hljs-string">/var/lib/neutron/tmp</span></code></pre></div><h4 id="provider-networks-2"><a class="markdownIt-Anchor" href="#provider-networks-2"></a> <a href="https://docs.openstack.org/neutron/train/install/compute-install-option1-rdo.html">Provider networks</a></h4><h5 id="vim-etcneutronpluginsml2linuxbridge_agentini-2"><a class="markdownIt-Anchor" href="#vim-etcneutronpluginsml2linuxbridge_agentini-2"></a> vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</h5><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[linux_bridge]</span><span class="hljs-attr">physical_interface_mappings</span> = <span class="hljs-string">provider:ens33(服务器网络接口名)</span><span class="hljs-attr">[vxlan]</span><span class="hljs-attr">enable_vxlan</span> = <span class="hljs-string">false</span><span class="hljs-attr">[securitygroup]</span><span class="hljs-attr">enable_security_group</span> = <span class="hljs-string">true</span><span class="hljs-attr">firewall_driver</span> = <span class="hljs-string">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span></code></pre></div><h5 id="edit-kernel-supports-2"><a class="markdownIt-Anchor" href="#edit-kernel-supports-2"></a> edit kernel supports</h5><div class="code-wrapper"><pre><code class="hljs shell">modprobe br_netfiltervim /etc/sysctl.confnet.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1sysctl -p</code></pre></div><h4 id="vim-etcnovanovaconf-2"><a class="markdownIt-Anchor" href="#vim-etcnovanovaconf-2"></a> vim /etc/nova/nova.conf</h4><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">[neutron]</span><span class="hljs-attr">auth_url</span> = <span class="hljs-string">http://controller:5000</span><span class="hljs-attr">auth_type</span> = <span class="hljs-string">password</span><span class="hljs-attr">project_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">user_domain_name</span> = <span class="hljs-string">default</span><span class="hljs-attr">region_name</span> = <span class="hljs-string">RegionOne</span><span class="hljs-attr">project_name</span> = <span class="hljs-string">service</span><span class="hljs-attr">username</span> = <span class="hljs-string">neutron</span><span class="hljs-attr">password</span> = <span class="hljs-string">neutron(neutron用户密码)</span></code></pre></div><h3 id="finalize-installation-2"><a class="markdownIt-Anchor" href="#finalize-installation-2"></a> Finalize installation</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl restart openstack-nova-computefor op in enable start status;do systemctl $op neutron-linuxbridge-agent;done</code></pre></div><h2 id="verify-operation-5"><a class="markdownIt-Anchor" href="#verify-operation-5"></a> Verify operation</h2><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc</code></pre></div><h3 id="provider-networks-3"><a class="markdownIt-Anchor" href="#provider-networks-3"></a> <a href="https://docs.openstack.org/neutron/train/install/verify-option1.html">Provider networks</a></h3><div class="code-wrapper"><pre><code class="hljs shell">openstack extension list --network</code></pre></div><h3 id="self-service-networks"><a class="markdownIt-Anchor" href="#self-service-networks"></a> <a href="https://docs.openstack.org/neutron/train/install/verify-option2.html">Self-service networks</a></h3><div class="code-wrapper"><pre><code class="hljs shell">openstack network agent list</code></pre></div><h1 id="cinder-installation-for-train"><a class="markdownIt-Anchor" href="#cinder-installation-for-train"></a> <a href="https://docs.openstack.org/cinder/train/install/">Cinder installation for Train</a></h1><h2 id="controller-5"><a class="markdownIt-Anchor" href="#controller-5"></a> controller</h2><h3 id="prerequisites-7"><a class="markdownIt-Anchor" href="#prerequisites-7"></a> Prerequisites</h3><h4 id="create-database-5"><a class="markdownIt-Anchor" href="#create-database-5"></a> Create Database</h4><div class="code-wrapper"><pre><code class="hljs shell">mysql -u root -p123456CREATE DATABASE cinder;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;cinder&#x27;;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;cinder&#x27;;exit;</code></pre></div><h4 id="configure-user-and-endpoints-5"><a class="markdownIt-Anchor" href="#configure-user-and-endpoints-5"></a> Configure User and Endpoints</h4><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置cinder用户密码</span>openstack user create --domain default --password-prompt cinderopenstack role add --project service --user cinder adminopenstack service create --name cinderv2 \  --description &quot;OpenStack Block Storage&quot; volumev2openstack service create --name cinderv3 \  --description &quot;OpenStack Block Storage&quot; volumev3openstack endpoint create --region RegionOne \  volumev2 public http://controller:8776/v2/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev2 internal http://controller:8776/v2/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev2 admin http://controller:8776/v2/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 public http://controller:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 internal http://controller:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 admin http://controller:8776/v3/%\(project_id\)s</code></pre></div><h3 id="install-and-configure-components-8"><a class="markdownIt-Anchor" href="#install-and-configure-components-8"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-cinder -yvim /etc/cinder/cinder.conf[DEFAULT]transport_url = rabbit://openstack:openstack@controllerauth_strategy = keystonemy_ip = 10.10.10.101[database]connection = mysql+pymysql://cinder:cinder@controller/cinder[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = cinderpassword = cinder(cinder用户密码)[oslo_concurrency]lock_path = /var/lib/cinder/tmpsu -s /bin/sh -c &quot;cinder-manage db sync&quot; cinder</code></pre></div><h3 id="configure-compute-to-use-block-storage"><a class="markdownIt-Anchor" href="#configure-compute-to-use-block-storage"></a> Configure Compute to use Block Storage[</h3><div class="code-wrapper"><pre><code class="hljs shell">vim /etc/nova/nova.conf[cinder]os_region_name = RegionOne</code></pre></div><h3 id="finalize-installation-3"><a class="markdownIt-Anchor" href="#finalize-installation-3"></a> Finalize installation</h3><div class="code-wrapper"><pre><code class="hljs shell">for op in restart status;do systemctl $op openstack-nova-api;donefor op in enable restart status;do for service in openstack-cinder-api openstack-cinder-scheduler;do systemctl $op $service;done;done</code></pre></div><h2 id="block"><a class="markdownIt-Anchor" href="#block"></a> block</h2><h3 id="prerequisites-8"><a class="markdownIt-Anchor" href="#prerequisites-8"></a> Prerequisites</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install lvm2 device-mapper-persistent-datafor op in enable start status;do systemctl $op lvm2-lvmetad;donepvcreate /dev/sdbvgcreate cinder-volumes /dev/sdbvim /etc/lvm/lvm.confdevices &#123;...filter = [ &quot;a/sdb/&quot;, &quot;r/.*/&quot;]</code></pre></div><h3 id="install-and-configure-components-9"><a class="markdownIt-Anchor" href="#install-and-configure-components-9"></a> Install and configure components</h3><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-cinder targetcli python-keystone -yvim /etc/cinder/cinder.conf[DEFAULT]auth_strategy = keystonetransport_url = rabbit://openstack:openstack@controllermy_ip = 10.10.10.103enabled_backends = lvmglance_api_servers = http://controller:9292[database]connection = mysql+pymysql://cinder:cinder@controller/cinder[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = cinderpassword = cinder[lvm]volume_driver = cinder.volume.drivers.lvm.LVMVolumeDrivervolume_group = cinder-volumestarget_protocol = iscsitarget_helper = lioadm[oslo_concurrency]lock_path = /var/lib/cinder/tmp</code></pre></div><h3 id="finalize-installation-4"><a class="markdownIt-Anchor" href="#finalize-installation-4"></a> Finalize installation</h3><div class="code-wrapper"><pre><code class="hljs shell">for op in enable restart status;do for service in openstack-cinder-volume target;do systemctl $op $service;done;done</code></pre></div><h2 id="verify-cinder-operation"><a class="markdownIt-Anchor" href="#verify-cinder-operation"></a> Verify Cinder operation</h2><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrcopenstack volume service list</code></pre></div><h1 id="horizon-installation-for-train"><a class="markdownIt-Anchor" href="#horizon-installation-for-train"></a> <a href="https://docs.openstack.org/horizon/train/install/">Horizon installation for Train</a></h1><h2 id="install-and-configure-components-10"><a class="markdownIt-Anchor" href="#install-and-configure-components-10"></a> Install and configure components</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install openstack-dashboard -yvim /etc/openstack-dashboard/local_settingsOPENSTACK_HOST = &quot;controller&quot;ALLOWED_HOSTS = [&#x27;*&#x27;]SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;CACHES = &#123;    &#x27;default&#x27;: &#123;         &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,         &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,    &#125;&#125;OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; % OPENSTACK_HOSTOPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = TrueOPENSTACK_API_VERSIONS = &#123;    &quot;identity&quot;: 3,    &quot;image&quot;: 2,    &quot;volume&quot;: 3,&#125;OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &quot;Default&quot;OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;user&quot;OPENSTACK_NEUTRON_NETWORK = &#123;    ...    &#x27;enable_router&#x27;: False,    &#x27;enable_quotas&#x27;: False,    &#x27;enable_distributed_router&#x27;: False,    &#x27;enable_ha_router&#x27;: False,    &#x27;enable_lb&#x27;: False,    &#x27;enable_firewall&#x27;: False,    &#x27;enable_vpn&#x27;: False,    &#x27;enable_fip_topology_check&#x27;: False,&#125;TIME_ZONE = &quot;Asia/Shanghai&quot;WEBROOT = &#x27;/dashboard/&#x27;vim  /etc/httpd/conf.d/openstack-dashboard.confWSGIApplicationGroup %&#123;GLOBAL&#125;</code></pre></div><h2 id="finalize-installation-5"><a class="markdownIt-Anchor" href="#finalize-installation-5"></a> Finalize installation</h2><div class="code-wrapper"><pre><code class="hljs shell">systemctl restart httpd.service memcached.service<span class="hljs-meta prompt_">#</span><span class="language-bash">访问http://主控节点IP/dashboard/,域:default</span></code></pre></div><h1 id="launch-an-instance可以通过dashboard实现"><a class="markdownIt-Anchor" href="#launch-an-instance可以通过dashboard实现"></a> Launch an instance（可以通过dashboard实现）</h1><h2 id="create-virtual-networks"><a class="markdownIt-Anchor" href="#create-virtual-networks"></a> Create virtual networks</h2><h3 id="provider-network"><a class="markdownIt-Anchor" href="#provider-network"></a> Provider network</h3><div class="code-wrapper"><pre><code class="hljs shell">. admin-openrcopenstack network create  --share --external \  --provider-physical-network provider \  --provider-network-type flat provideropenstack subnet create --network provider \  --allocation-pool start=192.168.40.101,end=192.168.40.250 \  --dns-nameserver 8.8.8.8 --gateway 192.168.40.1 \  --subnet-range 192.168.40.0/24 provider</code></pre></div><h3 id="self-service-network"><a class="markdownIt-Anchor" href="#self-service-network"></a> Self-service network</h3><div class="code-wrapper"><pre><code class="hljs shell">. demo-openrcopenstack network create selfserviceopenstack subnet create --network selfservice \  --dns-nameserver 8.8.4.4 --gateway 172.16.1.1 \  --subnet-range 172.16.1.0/24 selfserviceopenstack router create routeropenstack router add subnet router selfserviceopenstack router set router --external-gateway provider. admin-openrcip netnsopenstack port list --router router</code></pre></div><h2 id="create-m1nano-flavor"><a class="markdownIt-Anchor" href="#create-m1nano-flavor"></a> Create m1.nano flavor</h2><div class="code-wrapper"><pre><code class="hljs shell">for op in enable satrt status;do for service in libvirtd openstack-nova-compute;do systemctl $op $service;done;doneopenstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nanoopenstack flavor create --id 0 --vcpus 1 --ram 1024 --disk 10 m2.nano</code></pre></div><h2 id="generate-a-key-pair"><a class="markdownIt-Anchor" href="#generate-a-key-pair"></a> Generate a key pair</h2><div class="code-wrapper"><pre><code class="hljs gradle">. demo-openrcssh-keygen -q -N <span class="hljs-string">&quot;&quot;</span>openstack keypair create --<span class="hljs-keyword">public</span>-key ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub mykeyopenstack keypair list</code></pre></div><h2 id="add-security-group-rules"><a class="markdownIt-Anchor" href="#add-security-group-rules"></a> Add security group rules</h2><div class="code-wrapper"><pre><code class="hljs shell">openstack security group rule create --proto icmp defaultopenstack security group rule create --proto tcp --dst-port 22 default</code></pre></div><h2 id="launch-an-instance"><a class="markdownIt-Anchor" href="#launch-an-instance"></a> Launch an instance</h2><h3 id="provider-network-2"><a class="markdownIt-Anchor" href="#provider-network-2"></a> Provider network</h3><div class="code-wrapper"><pre><code class="hljs shell">. demo-openrcopenstack flavor listopenstack image listopenstack network listopenstack security group listopenstack server create --flavor m1.nano --image cirros \  --nic net-id=PROVIDER_NET_ID --security-group default \  --key-name mykey provider-instanceopenstack server listopenstack console url show provider-instance</code></pre></div><h3 id="self-service-network-2"><a class="markdownIt-Anchor" href="#self-service-network-2"></a> Self-service network</h3><div class="code-wrapper"><pre><code class="hljs shell">openstack server create --flavor m1.nano --image cirros \  --nic net-id=b364d40b-0e57-4b32-9949-db83666f0f57 --security-group default \  --key-name mykey newserver</code></pre></div><h2 id="修改实例默认密码controller"><a class="markdownIt-Anchor" href="#修改实例默认密码controller"></a> 修改实例默认密码(controller)</h2><div class="code-wrapper"><pre><code class="hljs shell">vim /etc/nova/nova.confinject_password=Truevim /etc/openstack-dashboard/local_settingsOPENSTACK_HYPERVISOR_FEATURES = &#123;&#x27;can_set_password&#x27;: True&#125;systemctl restart openstack-nova-*<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">创建实例时写入以下脚本，并勾选配置驱动</span><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>passwd root&lt;&lt;EOF123456123456EOF</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过二进制方式部署Kubernetes集群</title>
    <link href="/study/kubernetes/Bianry-Deploy-Kubernetes/"/>
    <url>/study/kubernetes/Bianry-Deploy-Kubernetes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="refence"><a class="markdownIt-Anchor" href="#refence"></a> Refence</h1><p><a href="https://www.cnblogs.com/lizexiong/p/14882419.html#blogTitle32">https://www.cnblogs.com/lizexiong/p/14882419.html#blogTitle32</a></p><h1 id="enviroment"><a class="markdownIt-Anchor" href="#enviroment"></a> Enviroment</h1><table><thead><tr><th style="text-align:center">Role</th><th style="text-align:center">IP</th><th style="text-align:center">Component</th><th style="text-align:center">Hostname</th></tr></thead><tbody><tr><td style="text-align:center">master(Kubernetes,Etcd)</td><td style="text-align:center">10.10.10.101</td><td style="text-align:center">cfssl<br/>etcd<br/>docker<br/>kube-apiserver<br/>kube-controller-manager<br/>kube-scheduler<br/>kubectl</td><td style="text-align:center">master</td></tr><tr><td style="text-align:center">node1(Kubernetes,Etcd)</td><td style="text-align:center">10.10.10.102</td><td style="text-align:center">etcd<br/>docker<br/>kubelet<br/>kube-proxy</td><td style="text-align:center">minion</td></tr><tr><td style="text-align:center">node2(Kubernetes,Etcd)</td><td style="text-align:center">10.10.10.103</td><td style="text-align:center">etcd<br/>docker<br/>kubelet<br/>kube-proxy</td><td style="text-align:center">slave</td></tr></tbody></table><h1 id="prepare"><a class="markdownIt-Anchor" href="#prepare"></a> Prepare</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span>systemctl disable firewalld --now<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭selinux</span>setenforce 0<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用,重启生效</span>sed -i &quot;s/enforcing/disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭swap</span>swapoff -a<span class="hljs-meta prompt_">#</span><span class="language-bash">永久关闭</span>sed -i &#x27;s/^[^#].*swap*/#&amp;/g&#x27; /etc/fstab<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装常用软件包</span>yum install vim net-tools lrzsz unzip dos2unix telnet sysstat iotop pciutils lsof tcpdump psmisc bc wget socat gcc tree chrony ntpdate mlocate zip unzip -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">设置主机名</span>hostnamectl set-hostname &lt;hostname&gt; <span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机名写入hosts</span>cat &gt;&gt; /etc/hosts &lt;&lt; EOF10.10.10.101 master10.10.10.102 minion10.10.10.103 slaveEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机间配置ssh免密登录</span>ssh-keygen -t rsafor host in master minion slave; do ssh-copy-id -i ~/.ssh/id_rsa.pub $host;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">内核开启网络支持</span>cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1net.ipv4.ip_nonlocal_bind = 1EOFmodprobe br_netfiltersysctl -p /etc/sysctl.d/kubernetes.conf</code></pre></div><h1 id="cfssl"><a class="markdownIt-Anchor" href="#cfssl"></a> Cfssl</h1><div class="code-wrapper"><pre><code class="hljs shell">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64chmod +x cfssl*mv cfssl_linux-amd64 /usr/bin/cfsslmv cfssljson_linux-amd64 /usr/bin/cfssljsonmv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</code></pre></div><h1 id="etcd"><a class="markdownIt-Anchor" href="#etcd"></a> Etcd</h1><h2 id="自签ca"><a class="markdownIt-Anchor" href="#自签ca"></a> 自签CA</h2><div class="code-wrapper"><pre><code class="hljs shell">mkdir cfssl/etcd -p &amp;&amp; cd cfssl/etcd cat &gt; ca-config.json &lt;&lt; EOF&#123;  &quot;signing&quot;: &#123;    &quot;default&quot;: &#123;      &quot;expiry&quot;: &quot;87600h&quot;    &#125;,    &quot;profiles&quot;: &#123;      &quot;www&quot;: &#123;         &quot;expiry&quot;: &quot;87600h&quot;,         &quot;usages&quot;: [            &quot;signing&quot;,            &quot;key encipherment&quot;,            &quot;server auth&quot;,            &quot;client auth&quot;        ]      &#125;    &#125;  &#125;&#125;EOFcat &gt; ca-csr.json &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;etcd CA&quot;,    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;rsa&quot;,        &quot;size&quot;: 2048    &#125;,    &quot;names&quot;: [        &#123;            &quot;C&quot;: &quot;CN&quot;,            &quot;L&quot;: &quot;ShangHai&quot;,            &quot;ST&quot;: &quot;ShangHai&quot;        &#125;    ]&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ca.pem和ca-key.pem文件</span>cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</code></pre></div><h2 id="使用自签ca签发https证书"><a class="markdownIt-Anchor" href="#使用自签ca签发https证书"></a> 使用自签CA签发HTTPS证书</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">hosts内为节点IP</span>cat &gt; server-csr.json &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;etcd&quot;,    &quot;hosts&quot;: [    &quot;10.10.10.101&quot;,    &quot;10.10.10.102&quot;,    &quot;10.10.10.103&quot;    ],    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;rsa&quot;,        &quot;size&quot;: 2048    &#125;,    &quot;names&quot;: [        &#123;            &quot;C&quot;: &quot;CN&quot;,            &quot;L&quot;: &quot;ShangHai&quot;,            &quot;ST&quot;: &quot;ShangHai&quot;        &#125;    ]&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成server.pem和server-key.pem文件</span>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</code></pre></div><h2 id="手动安装"><a class="markdownIt-Anchor" href="#手动安装"></a> 手动安装</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可以在https://github.com/etcd-io/etcd/releases寻找下载</span>mkdir /etc/etcd/&#123;bin,ssl&#125; -ptar -mxvf etcd-v3.5.0-linux-amd64.tarmv etcd-v3.5.0-linux-amd64.tar/etcd* /etc/etcd/bin/</code></pre></div><h2 id="yum安装"><a class="markdownIt-Anchor" href="#yum安装"></a> Yum安装</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install etcd -ymkdir /etc/etcd/ssl -p</code></pre></div><h2 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意检查各个节点的etcd.conf中主机名和IP是否和当前节点一致(没有则新建)</span><span class="hljs-meta prompt_">#</span><span class="language-bash">[Member]</span>ETCD_NAME=&quot;etcd-master&quot;ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;https://10.10.10.101:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;https://10.10.10.101:2379&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">[Clustering]</span>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.10.10.101:2380&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.10.10.101:2379&quot;ETCD_INITIAL_CLUSTER=&quot;etcd-master=https://10.10.10.101:2380,etcd-minion=https://10.10.10.102:2380,etcd-slave=https://10.10.10.103:2380&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</code></pre></div><h2 id="拷贝证书"><a class="markdownIt-Anchor" href="#拷贝证书"></a> 拷贝证书</h2><div class="code-wrapper"><pre><code class="hljs shell">for host in master minion slave; do scp cfssl/etcd/*.pem $host:/etc/etcd/ssl/;done</code></pre></div><h2 id="修改系统服务文件"><a class="markdownIt-Anchor" href="#修改系统服务文件"></a> 修改系统服务文件</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">/lib/systemd/system/etcd.service(没有则新建)</span>[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.target[Service]Type=notifyEnvironmentFile=/etc/etcd/etcd.confExecStart=/etc/etcd/etcd \--cert-file=/etc/etcd/ssl/server.pem \--key-file=/etc/etcd/ssl/server-key.pem \--peer-cert-file=/etc/etcd/ssl/server.pem \--peer-key-file=/etc/etcd/ssl/server-key.pem \--trusted-ca-file=/etc/etcd/ssl/ca.pem \--peer-trusted-ca-file=/etc/etcd/ssl/ca.pem \--logger=zapRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.target</code></pre></div><h2 id="自启启动"><a class="markdownIt-Anchor" href="#自启启动"></a> 自启启动</h2><div class="code-wrapper"><pre><code class="hljs shell">for host in master minion slave;do ssh $host &#x27;systemctl daemon-reload;systemctl enable etcd --now&#x27;;done</code></pre></div><h2 id="查看集群状态"><a class="markdownIt-Anchor" href="#查看集群状态"></a> 查看集群状态</h2><div class="code-wrapper"><pre><code class="hljs shell">ETCDCTL_API=3 /etc/etcd/etcdctl --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/server.pem --key=/etc/etcd/ssl/server-key.pem --endpoints=&quot;https://10.10.10.101:2379,https://10.10.10.102:2379,https://10.10.10.103:2379&quot; endpoint health --write-out=table+-----------------------------+--------+-------------+-------+|          ENDPOINT           | HEALTH |    TOOK     | ERROR |+-----------------------------+--------+-------------+-------+| https://10.10.10.101:2379   |  true  | 50.191672ms |       || https://10.10.10.102:2379   |  true  | 52.394036ms |       || https://10.10.10.103:2379   |  true  | 46.009422ms |       |+-----------------------------+--------+-------------+-------+</code></pre></div><h1 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h1><h2 id="手动安装-2"><a class="markdownIt-Anchor" href="#手动安装-2"></a> 手动安装</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可以在https://download.docker.com/linux/static/stable/x86_64/载</span>tar -mxvf docker-20.10.7.tgzmv docker/* /usr/bin<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">创建系统服务文件</span>cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.serviceWants=network-online.target[Service]Type=notifyExecStart=/usr/bin/dockerdExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTimeoutStartSec=0Delegate=yesKillMode=processRestart=on-failureStartLimitBurst=3StartLimitInterval=60s[Install]WantedBy=multi-user.targetEOF</code></pre></div><h2 id="yum安装-2"><a class="markdownIt-Anchor" href="#yum安装-2"></a> Yum安装</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官方脚本安装</span>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">手动yum安装</span><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载原有docker</span>yum remove docker*<span class="hljs-meta prompt_">#</span><span class="language-bash">安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</span>yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_">#</span><span class="language-bash">设置阿里源地址</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_">#</span><span class="language-bash">安装</span>yum install docker-ce docker-ce-cli containerd.io -y</code></pre></div><h2 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置镜像加速地址,并修改Cgroup Driver(docker默认cgroupfs，k8s推荐使用systemd)</span>mkdir /etc/docker -pcat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn/&quot;],  &quot;exec-etcs&quot;: [&quot;native.cgroupdriver=systemd&quot;]&#125;EOF</code></pre></div><h2 id="自启启动-2"><a class="markdownIt-Anchor" href="#自启启动-2"></a> 自启启动</h2><div class="code-wrapper"><pre><code class="hljs shell">for host in master minion slave;do ssh $host &#x27;systemctl daemon-reload;systemctl enable docker --now&#x27;;done</code></pre></div><h1 id="master"><a class="markdownIt-Anchor" href="#master"></a> Master</h1><h2 id="二进制文件"><a class="markdownIt-Anchor" href="#二进制文件"></a> 二进制文件</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可以在https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md寻找下载</span>mkdir -p /etc/kubernetes/&#123;bin,conf,ssl,logs&#125;tar -mxvf kubernetes-server-linux-amd64.tar.gzcd kubernetes/server/bin/cp kube-apiserver kube-scheduler kube-controller-manager /etc/kubernetes/bin/cp kubectl /usr/bin/</code></pre></div><h2 id="自签ca-2"><a class="markdownIt-Anchor" href="#自签ca-2"></a> 自签CA</h2><div class="code-wrapper"><pre><code class="hljs shell">mkdir cfssl/kubernetes -p &amp;&amp; cd cfssl/kubernetescat &gt; ca-config.json &lt;&lt; EOF&#123;  &quot;signing&quot;: &#123;    &quot;default&quot;: &#123;      &quot;expiry&quot;: &quot;87600h&quot;    &#125;,    &quot;profiles&quot;: &#123;      &quot;kubernetes&quot;: &#123;         &quot;expiry&quot;: &quot;87600h&quot;,         &quot;usages&quot;: [            &quot;signing&quot;,            &quot;key encipherment&quot;,            &quot;server auth&quot;,            &quot;client auth&quot;        ]      &#125;    &#125;  &#125;&#125;EOFcat &gt; ca-csr.json &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;kubernetes&quot;,    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;rsa&quot;,        &quot;size&quot;: 2048    &#125;,    &quot;names&quot;: [        &#123;            &quot;C&quot;: &quot;CN&quot;,            &quot;L&quot;: &quot;ShangHai&quot;,            &quot;ST&quot;: &quot;ShangHai&quot;,            &quot;O&quot;: &quot;Kubernetes&quot;,            &quot;OU&quot;: &quot;System&quot;        &#125;    ]&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ca.pem和ca-key.pem文件</span>cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</code></pre></div><h2 id="kube-apiserver"><a class="markdownIt-Anchor" href="#kube-apiserver"></a> kube-apiserver</h2><h3 id="使用自签ca签-https证书"><a class="markdownIt-Anchor" href="#使用自签ca签-https证书"></a> 使用自签CA签 HTTPS证书</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">hosts内为节点IP,为了方便后期扩容可以多写几个预留的IP</span>cat &gt; server-csr.json &lt;&lt; EOF&#123;    &quot;CN&quot;: &quot;kubernetes&quot;,    &quot;hosts&quot;: [      &quot;10.0.0.1&quot;,      &quot;127.0.0.1&quot;,      &quot;10.10.10.101&quot;,      &quot;10.10.10.102&quot;,      &quot;10.10.10.103&quot;,      &quot;kubernetes&quot;,      &quot;kubernetes.default&quot;,      &quot;kubernetes.default.svc&quot;,      &quot;kubernetes.default.svc.cluster&quot;,      &quot;kubernetes.default.svc.cluster.local&quot;    ],    &quot;key&quot;: &#123;        &quot;algo&quot;: &quot;rsa&quot;,        &quot;size&quot;: 2048    &#125;,    &quot;names&quot;: [        &#123;            &quot;C&quot;: &quot;CN&quot;,            &quot;L&quot;: &quot;ShangHai&quot;,            &quot;ST&quot;: &quot;ShangHai&quot;,            &quot;O&quot;: &quot;Kubernetes&quot;,            &quot;OU&quot;: &quot;System&quot;        &#125;    ]&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成server.pem和server-key.pem文件</span>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝证书</span>cp cfssl/kubernetes/*.pem /etc/kubernetes/ssl<span class="hljs-meta prompt_">#</span><span class="language-bash">如果etcd和master不在一台机器部署，这里etcd的证书也要拷贝</span>cp cfssl/etcd/*.pem /etc/etcd/ssl</code></pre></div><h3 id="创建配置文件"><a class="markdownIt-Anchor" href="#创建配置文件"></a> 创建配置文件</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建token</span>cat &gt; /opt/kubernetes/conf/token.csv &lt;&lt; EOFc47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:node-bootstrapper&quot;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">token也可自行生成替换</span>head -c 16 /dev/urandom | od -An -t x | tr -d &#x27; &#x27;cat &gt; /opt/kubernetes/conf/kube-apiserver.conf &lt;&lt; EOFKUBE_APISERVER_OPTS=&quot;--logtostderr=false \\--v=2 \\--log-dir=/opt/kubernetes/logs \\--etcd-servers=https://10.10.10.101:2379,https://10.10.10.102:2379,https://10.10.10.103:2379 \\--bind-address=10.10.10.101 \\--secure-port=6443 \\--advertise-address=10.10.10.101 \\--allow-privileged=true \\--service-cluster-ip-range=10.0.0.0/24 \\--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\--authorization-mode=RBAC,Node \\--enable-bootstrap-token-auth=true \\--token-auth-file=/opt/kubernetes/conf/token.csv \\--service-node-port-range=1-65535 \\--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\--client-ca-file=/opt/kubernetes/ssl/ca.pem \\--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\--service-account-issuer=api \\--service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\--etcd-cafile=/opt/etcd/ssl/ca.pem \\--etcd-certfile=/opt/etcd/ssl/server.pem \\--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\--requestheader-allowed-names=kubernetes \\--requestheader-extra-headers-prefix=X-Remote-Extra- \\--requestheader-group-headers=X-Remote-Group \\--requestheader-username-headers=X-Remote-User \\--enable-aggregator-routing=true \\--audit-log-maxage=30 \\--audit-log-maxbackup=3 \\--audit-log-maxsize=100 \\--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;EOF</code></pre></div><h3 id="创建系统服务文件"><a class="markdownIt-Anchor" href="#创建系统服务文件"></a> 创建系统服务文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /lib/systemd/system/kube-apiserver.service &lt;&lt; EOF[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/opt/kubernetes/conf/kube-apiserver.confExecStart=/opt/kubernetes/bin/kube-apiserver \$KUBE_APISERVER_OPTSRestart=on-failure[Install]WantedBy=multi-user.targetEOF</code></pre></div><h3 id="自启启动-3"><a class="markdownIt-Anchor" href="#自启启动-3"></a> 自启启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl daemon-reloadsystemctl enable kube-apiserver --now</code></pre></div><h2 id="kube-controller-manager"><a class="markdownIt-Anchor" href="#kube-controller-manager"></a> kube-controller-manager</h2><h3 id="证书"><a class="markdownIt-Anchor" href="#证书"></a> 证书</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成证书</span>cat &gt; kube-controller-manager-csr.json &lt;&lt; EOF&#123;  &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,  &quot;hosts&quot;: [],  &quot;key&quot;: &#123;    &quot;algo&quot;: &quot;rsa&quot;,    &quot;size&quot;: 2048  &#125;,  &quot;names&quot;: [    &#123;      &quot;C&quot;: &quot;CN&quot;,      &quot;L&quot;: &quot;ShangHai&quot;,       &quot;ST&quot;: &quot;ShangHai&quot;,      &quot;O&quot;: &quot;system:masters&quot;,      &quot;OU&quot;: &quot;System&quot;    &#125;  ]&#125;EOFcfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝证书</span>cp cfssl/kubernetes/kube-controller-manager*.pem /etc/kubernetes/ssl</code></pre></div><h3 id="创建配置文件-2"><a class="markdownIt-Anchor" href="#创建配置文件-2"></a> 创建配置文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kube-controller-manager.conf &lt;&lt; EOFKUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=false \\--v=2 \\--log-dir=/opt/kubernetes/logs \\--leader-elect=true \\--kubeconfig=/opt/kubernetes/conf/kube-controller-manager.kubeconfig \\--bind-address=127.0.0.1 \\--allocate-node-cidrs=true \\--cluster-cidr=10.244.0.0/16 \\--service-cluster-ip-range=10.0.0.0/24 \\--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\--root-ca-file=/opt/kubernetes/ssl/ca.pem \\--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\--cluster-signing-duration=87600h0m0s&quot;EOF</code></pre></div><h3 id="创建kubeconfig文件"><a class="markdownIt-Anchor" href="#创建kubeconfig文件"></a> 创建kubeconfig文件</h3><div class="code-wrapper"><pre><code class="hljs shell">KUBE_CONFIG=&quot;/opt/kubernetes/conf/kube-controller-manager.kubeconfig&quot;KUBE_APISERVER=&quot;https://10.10.10.101:6443&quot;kubectl config set-cluster kubernetes \  --certificate-authority=/opt/kubernetes/ssl/ca.pem \  --embed-certs=true \  --server=$&#123;KUBE_APISERVER&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-credentials kube-controller-manager \  --client-certificate=/opt/kubernetes/ssl/kube-controller-manager.pem \  --client-key=/opt/kubernetes/ssl/kube-controller-manager-key.pem \  --embed-certs=true \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-context default \  --cluster=kubernetes \  --user=kube-controller-manager \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config use-context default --kubeconfig=$&#123;KUBE_CONFIG&#125;</code></pre></div><h3 id="创建系统服务文件-2"><a class="markdownIt-Anchor" href="#创建系统服务文件-2"></a> 创建系统服务文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; EOF[Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/opt/kubernetes/conf/kube-controller-manager.confExecStart=/opt/kubernetes/bin/kube-controller-manager \$KUBE_CONTROLLER_MANAGER_OPTSRestart=on-failure[Install]WantedBy=multi-user.targetEOF</code></pre></div><h3 id="自启启动-4"><a class="markdownIt-Anchor" href="#自启启动-4"></a> 自启启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl daemon-reloadsystemctl enable kube-controller-manager --now</code></pre></div><h2 id="kube-scheduler"><a class="markdownIt-Anchor" href="#kube-scheduler"></a> kube-scheduler</h2><h3 id="证书-2"><a class="markdownIt-Anchor" href="#证书-2"></a> 证书</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成证书</span>cat &gt; kube-scheduler-csr.json &lt;&lt; EOF&#123;  &quot;CN&quot;: &quot;system:kube-scheduler&quot;,  &quot;hosts&quot;: [],  &quot;key&quot;: &#123;    &quot;algo&quot;: &quot;rsa&quot;,    &quot;size&quot;: 2048  &#125;,  &quot;names&quot;: [    &#123;      &quot;C&quot;: &quot;CN&quot;,      &quot;L&quot;: &quot;ShangHai&quot;,      &quot;ST&quot;: &quot;ShangHai&quot;,      &quot;O&quot;: &quot;system:masters&quot;,      &quot;OU&quot;: &quot;System&quot;    &#125;  ]&#125;EOFcfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝证书</span>cp cfssl/kubernetes/kube-cheduler*.pem /etc/kubernetes/ssl</code></pre></div><h3 id="创建配置文件-3"><a class="markdownIt-Anchor" href="#创建配置文件-3"></a> 创建配置文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kube-scheduler.conf &lt;&lt; EOFKUBE_SCHEDULER_OPTS=&quot;--logtostderr=false \\--v=2 \\--log-dir=/opt/kubernetes/logs \\--leader-elect \\--kubeconfig=/opt/kubernetes/conf/kube-scheduler.kubeconfig \\--bind-address=127.0.0.1&quot;EOF</code></pre></div><h3 id="创建kubeconfig文件-2"><a class="markdownIt-Anchor" href="#创建kubeconfig文件-2"></a> 创建kubeconfig文件</h3><div class="code-wrapper"><pre><code class="hljs shell">KUBE_CONFIG=&quot;/opt/kubernetes/conf/kube-scheduler.kubeconfig&quot;KUBE_APISERVER=&quot;https://10.10.10.101:6443&quot;kubectl config set-cluster kubernetes \  --certificate-authority=/opt/kubernetes/ssl/ca.pem \  --embed-certs=true \  --server=$&#123;KUBE_APISERVER&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-credentials kube-scheduler \  --client-certificate=/opt/kubernetes/ssl/kube-scheduler.pem \  --client-key=/opt/kubernetes/ssl/kube-scheduler-key.pem \  --embed-certs=true \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-context default \  --cluster=kubernetes \  --user=kube-scheduler \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config use-context default --kubeconfig=$&#123;KUBE_CONFIG&#125;</code></pre></div><h3 id="创建系统服务"><a class="markdownIt-Anchor" href="#创建系统服务"></a> 创建系统服务</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; EOF[Unit]Description=Kubernetes SchedulerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/opt/kubernetes/conf/kube-scheduler.confExecStart=/opt/kubernetes/bin/kube-scheduler \$KUBE_SCHEDULER_OPTSRestart=on-failure[Install]WantedBy=multi-user.targetEOF</code></pre></div><h3 id="自启启动-5"><a class="markdownIt-Anchor" href="#自启启动-5"></a> 自启启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl daemon-reloadsystemctl enable kube-scheduler --now</code></pre></div><h2 id="查看集群状态-2"><a class="markdownIt-Anchor" href="#查看集群状态-2"></a> 查看集群状态</h2><h3 id="证书-3"><a class="markdownIt-Anchor" href="#证书-3"></a> 证书</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成证书</span>cat &gt; admin-csr.json &lt;&lt;EOF&#123;  &quot;CN&quot;: &quot;admin&quot;,  &quot;hosts&quot;: [],  &quot;key&quot;: &#123;    &quot;algo&quot;: &quot;rsa&quot;,    &quot;size&quot;: 2048  &#125;,  &quot;names&quot;: [    &#123;      &quot;C&quot;: &quot;CN&quot;,      &quot;L&quot;: &quot;ShangHai&quot;,      &quot;ST&quot;: &quot;ShangHai&quot;,      &quot;O&quot;: &quot;system:masters&quot;,      &quot;OU&quot;: &quot;System&quot;    &#125;  ]&#125;EOFcfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝证书</span>cp cfssl/kubernetes/admin*.pem /etc/kubernetes/ssl</code></pre></div><h3 id="创建kubeconfig文件-3"><a class="markdownIt-Anchor" href="#创建kubeconfig文件-3"></a> 创建kubeconfig文件</h3><div class="code-wrapper"><pre><code class="hljs shell">mkdir /root/.kubeKUBE_CONFIG=&quot;/root/.kube/config&quot;KUBE_APISERVER=&quot;https://10.10.10.101:6443&quot;kubectl config set-cluster kubernetes \  --certificate-authority=/etc/kubernetes/ssl/ca.pem \  --embed-certs=true \  --server=$&#123;KUBE_APISERVER&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-credentials cluster-admin \  --client-certificate=//etc/kubernetes/ssl/admin.pem \  --client-key=/etc/kubernetes/ssl/admin-key.pem \  --embed-certs=true \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-context default \  --cluster=kubernetes \  --user=cluster-admin \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config use-context default --kubeconfig=$&#123;KUBE_CONFIG&#125;</code></pre></div><h3 id="查看当前组建状态"><a class="markdownIt-Anchor" href="#查看当前组建状态"></a> 查看当前组建状态</h3><div class="code-wrapper"><pre><code class="hljs shell">kubectl get csNAME                STATUS    MESSAGE             ERRORscheduler           Healthy   ok                  controller-manager  Healthy   ok                   etcd-master         Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;etcd-minio          Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;  etcd-slave          Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</code></pre></div><h3 id="授权kubelet-bootstrap用户允许请求证书"><a class="markdownIt-Anchor" href="#授权kubelet-bootstrap用户允许请求证书"></a> 授权kubelet-bootstrap用户允许请求证书</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建node必备，不然node的kubelet无法启动,就是创建一个可以申请证书的用户</span>kubectl create clusterrolebinding kubelet-bootstrap \--clusterrole=system:node-bootstrapper \--user=kubelet-bootstrapkubectl create clusterrolebinding system:anonymous --clusterrole=cluster-admin ?--user=system:anonymous</code></pre></div><h1 id="nodes"><a class="markdownIt-Anchor" href="#nodes"></a> Nodes</h1><h2 id="拷贝二进制文件和证书"><a class="markdownIt-Anchor" href="#拷贝二进制文件和证书"></a> 拷贝二进制文件和证书</h2><div class="code-wrapper"><pre><code class="hljs shell">ssh minion &quot;mkdir -p /opt/kubernetes/&#123;bin,conf,ssl,logs&#125;&quot;cd kubernetes/server/bin/scp -r kubelet kube-proxy minion:/opt/kubernetes/bin/scp /opt/kubernetes/ssl/ca.pem minion:/opt/kubernetes/ssl/scp /usr/bin/kubectl minion:/usr/bin</code></pre></div><h2 id="kubulet"><a class="markdownIt-Anchor" href="#kubulet"></a> kubulet</h2><h3 id="创建配置文件-4"><a class="markdownIt-Anchor" href="#创建配置文件-4"></a> 创建配置文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kubelet.conf &lt;&lt; EOFKUBELET_OPTS=&quot;--logtostderr=false \\--v=2 \\--log-dir=/opt/kubernetes/logs \\--hostname-override=(节点名) \\--network-plugin=cni \\--kubeconfig=/opt/kubernetes/conf/kubelet.kubeconfig \\--bootstrap-kubeconfig=/opt/kubernetes/conf/bootstrap.kubeconfig \\--config=/opt/kubernetes/conf/kubelet-config.yml \\--cert-dir=/opt/kubernetes/ssl \\--pod-infra-container-image=lizexiong/pause-amd64:3.0(pause镜像)&quot;EOF</code></pre></div><h3 id="配置参数文件"><a class="markdownIt-Anchor" href="#配置参数文件"></a> 配置参数文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kubelet-config.yml &lt;&lt; EOFkind: KubeletConfigurationapiVersion: kubelet.config.k8s.io/v1beta1address: 0.0.0.0port: 10250readOnlyPort: 10255cgroupDriver: systemd(和docker的cgroupdriver保持一致)clusterDNS:- 10.0.0.2clusterDomain: cluster.local failSwapOn: falseauthentication:  anonymous:    enabled: false  webhook:    cacheTTL: 2m0s    enabled: true  x509:    clientCAFile: /opt/kubernetes/ssl/ca.pem authorization:  mode: Webhook  webhook:    cacheAuthorizedTTL: 5m0s    cacheUnauthorizedTTL: 30sevictionHard:  imagefs.available: 15%  memory.available: 100Mi  nodefs.available: 10%  nodefs.inodesFree: 5%maxOpenFiles: 1000000maxPods: 110EOF</code></pre></div><h3 id="创建kubeconfig文件-4"><a class="markdownIt-Anchor" href="#创建kubeconfig文件-4"></a> 创建kubeconfig文件</h3><div class="code-wrapper"><pre><code class="hljs shell">KUBE_CONFIG=&quot;/opt/kubernetes/conf/bootstrap.kubeconfig&quot;KUBE_APISERVER=&quot;https://10.10.10.101:6443&quot; # apiserver IP:PORTTOKEN=&quot;c47ffb939f5ca36231d9e3121a252940&quot; # 与token.csv里保持一致<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">生成 kubelet bootstrap kubeconfig 配置文件</span>kubectl config set-cluster kubernetes \  --certificate-authority=/opt/kubernetes/ssl/ca.pem \  --embed-certs=true \  --server=$&#123;KUBE_APISERVER&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-credentials &quot;kubelet-bootstrap&quot; \  --token=$&#123;TOKEN&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-context default \  --cluster=kubernetes \  --user=&quot;kubelet-bootstrap&quot; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config use-context default --kubeconfig=$&#123;KUBE_CONFIG&#125;</code></pre></div><h3 id="创建系统服务文件-3"><a class="markdownIt-Anchor" href="#创建系统服务文件-3"></a> 创建系统服务文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF[Unit]Description=Kubernetes KubeletAfter=docker.service[Service]EnvironmentFile=/opt/kubernetes/conf/kubelet.confExecStart=/opt/kubernetes/bin/kubelet \$KUBELET_OPTSRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF</code></pre></div><h3 id="自启启动-6"><a class="markdownIt-Anchor" href="#自启启动-6"></a> 自启启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl daemon-reloadsystemctl enable kubelet --now</code></pre></div><h3 id="master批准node加入集群"><a class="markdownIt-Anchor" href="#master批准node加入集群"></a> master批准node加入集群</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">获取node-csr名称</span>kubectl get csr <span class="hljs-meta prompt_">#</span><span class="language-bash">批准</span>kubectl certificate approve &lt;node-csr-name&gt;<span class="hljs-meta prompt_">#</span><span class="language-bash">获取节点信息</span>kubectl get node</code></pre></div><h2 id="kube-proxy"><a class="markdownIt-Anchor" href="#kube-proxy"></a> kube-proxy</h2><h3 id="创建配置文件-5"><a class="markdownIt-Anchor" href="#创建配置文件-5"></a> 创建配置文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kube-proxy.conf &lt;&lt; EOFKUBE_PROXY_OPTS=&quot;--logtostderr=false \\--v=2 \\--log-dir=/opt/kubernetes/logs \\--config=/opt/kubernetes/conf/kube-proxy-config.yml&quot;EOF</code></pre></div><h3 id="配置参数文件-2"><a class="markdownIt-Anchor" href="#配置参数文件-2"></a> 配置参数文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /opt/kubernetes/conf/kube-proxy-config.yml &lt;&lt; EOFkind: KubeProxyConfigurationapiVersion: kubeproxy.config.k8s.io/v1alpha1bindAddress: 0.0.0.0metricsBindAddress: 0.0.0.0:10249clientConnection:  kubeconfig: /opt/kubernetes/conf/kube-proxy.kubeconfighostnameOverride: node01clusterCIDR: 10.0.0.0/24EOF</code></pre></div><h3 id="master生成证书并拷贝"><a class="markdownIt-Anchor" href="#master生成证书并拷贝"></a> master生成证书并拷贝</h3><div class="code-wrapper"><pre><code class="hljs shell">cd cfssl/kubernetescat &gt; kube-proxy-csr.json &lt;&lt; EOF&#123;  &quot;CN&quot;: &quot;system:kube-proxy&quot;,  &quot;hosts&quot;: [],  &quot;key&quot;: &#123;    &quot;algo&quot;: &quot;rsa&quot;,    &quot;size&quot;: 2048  &#125;,  &quot;names&quot;: [    &#123;      &quot;C&quot;: &quot;CN&quot;,      &quot;L&quot;: &quot;ShangHai&quot;,      &quot;ST&quot;: &quot;ShangHai&quot;,      &quot;O&quot;: &quot;Kubernets&quot;,      &quot;OU&quot;: &quot;System&quot;    &#125;  ]&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成证书</span>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝证书</span>scp /cfssl/kubernetes/kube-proxy*pem minion:/opt/kubernetes/ssl</code></pre></div><h3 id="创建kubeconfig文件-5"><a class="markdownIt-Anchor" href="#创建kubeconfig文件-5"></a> 创建kubeconfig文件</h3><div class="code-wrapper"><pre><code class="hljs shell">KUBE_CONFIG=&quot;/opt/kubernetes/conf/kube-proxy.kubeconfig&quot;KUBE_APISERVER=&quot;https://10.10.10.101:6443&quot;kubectl config set-cluster kubernetes \  --certificate-authority=/opt/kubernetes/ssl/ca.pem \  --embed-certs=true \  --server=$&#123;KUBE_APISERVER&#125; \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-credentials kube-proxy \  --client-certificate=/opt/kubernetes/ssl/kube-proxy.pem \  --client-key=/opt/kubernetes/ssl/kube-proxy-key.pem \  --embed-certs=true \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config set-context default \  --cluster=kubernetes \  --user=kube-proxy \  --kubeconfig=$&#123;KUBE_CONFIG&#125;kubectl config use-context default --kubeconfig=$&#123;KUBE_CONFIG&#125;</code></pre></div><h3 id="创建系统服务文件-4"><a class="markdownIt-Anchor" href="#创建系统服务文件-4"></a> 创建系统服务文件</h3><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; EOF[Unit]Description=Kubernetes ProxyAfter=network.target[Service]EnvironmentFile=/opt/kubernetes/conf/kube-proxy.confExecStart=/opt/kubernetes/bin/kube-proxy \$KUBE_PROXY_OPTSRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF</code></pre></div><h3 id="自启启动-7"><a class="markdownIt-Anchor" href="#自启启动-7"></a> 自启启动</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl daemon-reloadsystemctl enable kube-proxy --now</code></pre></div><h2 id="部署网络组件"><a class="markdownIt-Anchor" href="#部署网络组件"></a> 部署网络组件</h2><h3 id="calico"><a class="markdownIt-Anchor" href="#calico"></a> calico</h3><div class="code-wrapper"><pre><code class="hljs shell">https://blog.csdn.net/qq_31136839/article/details/100032022<span class="hljs-meta prompt_">#</span><span class="language-bash">下载yaml</span>wget https://docs.projectcalico.org/manifests/calico.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改CALICO_IPV4POOL_CIDR,此处的网段地址应和kube-controller-manager.conf中的--cluster-cidr保持一致,修改后应用</span>kubectl apply -f calico.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pod直到成功运行</span>kubectl get pods -n kube-system</code></pre></div><h3 id="flannel"><a class="markdownIt-Anchor" href="#flannel"></a> flannel</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改Network,此处的网段地址应和kube-controller-manager.conf中的--cluster-cidr保持一致,修改后应用</span>kubectl apply -f flannel.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pod直到成功运行</span>kubectl get pods -n kube-system<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">如果报错找不到/run/flannel/subnet.env</span>cat &gt; /run/flannel/subnet.env &lt;&lt; EOFFLANNEL_NETWORK=10.244.0.0/16FLANNEL_SUBNET=10.244.0.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=trueEOF</code></pre></div><h2 id="授权apiserver"><a class="markdownIt-Anchor" href="#授权apiserver"></a> 授权apiserver</h2><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; apiserver-to-kubelet-rbac.yaml &lt;&lt; EOFapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  annotations:    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;  labels:    kubernetes.io/bootstrapping: rbac-defaults  name: system:kube-apiserver-to-kubeletrules:  - apiGroups:      - &quot;&quot;    resources:      - nodes/proxy      - nodes/stats      - nodes/log      - nodes/spec      - nodes/metrics      - pods/log    verbs:      - &quot;*&quot;---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: system:kube-apiserver  namespace: &quot;&quot;roleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:kube-apiserver-to-kubeletsubjects:  - apiGroup: rbac.authorization.k8s.io    kind: User    name: kubernetesEOFkubectl apply -f apiserver-to-kubelet-rbac.yaml</code></pre></div><h2 id="部署coredns"><a class="markdownIt-Anchor" href="#部署coredns"></a> 部署Coredns</h2><div class="code-wrapper"><pre><code class="hljs shell">https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/coredns/coredns.yaml.in<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改dns_memory_limit和clusterIP,clusterIP地址应和kubelet-config.yml中的clusterDNS保持一致,修改后应用</span>kubelet apply -f coredns.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">授权</span>kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:coredns<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pod成功运行</span>kubectl get pods -n kube-system</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>K8S</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Commands</title>
    <link href="/study/others/Commands/"/>
    <url>/study/others/Commands/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">History添加时间戳</span> echo &#x27;export HISTTIMEFORMAT=&quot;`whoami` : %F %T : &quot;&#x27; &gt;&gt; /etc/profile . /etc/profile<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">美化PS1</span>PS1=\[\e[37;1m\][\[\e[31;1m\]\h\[\e[34;1m\]@\[\e[33;1m\]\w \[\e[32;1m\]\t\[\e[37;1m\]]\[\e[36;1m\]&gt;\[\e[m\]<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">Ubuntu修改dash</span> sudo dpkg-reconfigure dash<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">vim取消复制时自动添加注释</span>vim ~/.vimrcset paste<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">vim添加脚本简介</span>vim ~/.vimrcautocmd BufNewFile *.py,*.sh, exec &quot;:call SetTitle()&quot;let $author_name=&quot;Felix Cheung&quot;let $author_email=&quot;felix7cheung@163.com&quot;func SetTitle()if &amp;filetype == &#x27;sh&#x27;call setline(1,&quot;\#!/bin/bash&quot;)call append(line(&quot;.&quot;),   &quot;\#File Name    : &quot;.expand(&quot;%&quot;))call append(line(&quot;.&quot;)+1, &quot;\#Author       : &quot;.$author_name)call append(line(&quot;.&quot;)+2, &quot;\#Mail         : &quot;.$author_email)call append(line(&quot;.&quot;)+3, &quot;\#Create Time  : &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))call append(line(&quot;.&quot;)+4, &quot;\#Description  : &quot;)call append(line(&quot;.&quot;)+5, &quot;&quot;)elsecall setline(1,&quot;\#!/usr/bin/env python&quot;)call append(line(&quot;.&quot;),   &quot;\#File Name    : &quot;.expand(&quot;%&quot;))call append(line(&quot;.&quot;)+1, &quot;\#Author       : &quot;.$author_name)call append(line(&quot;.&quot;)+2, &quot;\#Mail         : &quot;.$author_email)call append(line(&quot;.&quot;)+3, &quot;\#Create Time  : &quot;.strftime(&quot;%Y-%m-%d %H:%M&quot;))call append(line(&quot;.&quot;)+4, &quot;\#Description  : &quot;)call append(line(&quot;.&quot;)+5, &quot;&quot;)endifendfuncautocmd BufNewfile * normal G<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">换源</span>mkdir /opt/centos-yum.bak mv /etc/yum.repos.d/* /opt/centos-yum.bak/wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum clean all yum makecache</code></pre></div><h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#文件下载器, 当前路径</span>python -m http.server（可直接加端口，不加默认<span class="hljs-number">8000</span>）<span class="hljs-comment">#升级pip</span>python -m pip install --upgrade pip<span class="hljs-comment">#py环境变量</span>/usr/<span class="hljs-built_in">bin</span>/env python<span class="hljs-comment">#设置源</span>pip config <span class="hljs-built_in">set</span> <span class="hljs-keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre></div><h1 id="go"><a class="markdownIt-Anchor" href="#go"></a> Go</h1><div class="code-wrapper"><pre><code class="hljs shell">go mod init xxxxgo mod tidygo env -w GO111MODULE=on // 开启go modgo env -w GOPROXY=https://goproxy.cn,direct // 切换下载代理go get -u github.com/spf13/cobra@latestgo install github.com/spf13/cobra-cli@latestcobra-cli initcobra-cli add xxxxgo build xxx.go<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">静态编译</span>CGO_ENABLED=0 GOOS=linux go build -a -ldflags &#x27;-extldflags &quot;-static&quot; -w -s&#x27; .<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">压缩</span>upx -9 xxx</code></pre></div><h1 id="ansible"><a class="markdownIt-Anchor" href="#ansible"></a> Ansible</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示任务时间</span> mkdir /etc/ansible/callback_plugins wget https://raw.githubusercontent.com/jlafon/ansibleprofile/master/callback_plugins/profile_tasks.py -p /etc/ansible/callback_plugins在ansible.cfg 中加入 callback_whitelist = profile_tasks</code></pre></div><h1 id="jenkins"><a class="markdownIt-Anchor" href="#jenkins"></a> Jenkins</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改源</span>sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; $JENKINS_HOME/update/default.jsonhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查用插件</span>chineseRole-based Authorization StrategyJob Configuration HistoryWorkspace Cleanup Plugin</code></pre></div><h1 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">自动安装</span> curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置镜像加速地址</span> mkdir /etc/docker/ -p cat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;    &quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn/&quot;],     &quot;data-root&quot;: &quot;/mnt/docker&quot;&#125; EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改储存目录</span>vim /usr/lib/systemd/system/docker.serviceExecStart=..... --graph /mnt/dockersystemctl daemon-reload</code></pre></div><h1 id="kubenetes"><a class="markdownIt-Anchor" href="#kubenetes"></a> Kubenetes</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">命令补全</span>yum install -y bash-completionsource /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">切换默认命名空间</span>kubectl config set-context $(kubectl config current-context) --namespace=&lt;work_namespace&gt;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">删除terminal状态的pv/pod</span>kubectl patch pv xxx -p &#x27;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#x27;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">删除terminal状态的ns</span>https://blog.csdn.net/qq_44273583/article/details/124594314<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">调整端口范围</span>vim /etc/kubernetes/manifests/kube-apiserver.yaml  -    --service-node-port-range=1-65535<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">证书过期</span>Unable to connect to the server: x509: certificate has expired or is not yet validhttps://blog.csdn.net/swan_tang/article/details/115755311</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过Kubeadm部署Kubernetes高可用集群</title>
    <link href="/study/kubernetes/Kubeadm-Deploy-HA-Kubernetes/"/>
    <url>/study/kubernetes/Kubeadm-Deploy-HA-Kubernetes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="学习环境"><a class="markdownIt-Anchor" href="#学习环境"></a> 学习环境</h1><p>vmware安装三台虚拟机，或者先安装一台，完成下面的准备操作后克隆两台虚拟机，再修改IP；主机名可以在安装时候设置，或者装完之后通过hostnamectl set-hostname修改</p><table><thead><tr><th style="text-align:center">hostname</th><th style="text-align:center">os</th><th style="text-align:center">static ip</th><th style="text-align:center">role</th></tr></thead><tbody><tr><td style="text-align:center">master</td><td style="text-align:center">centos7.8</td><td style="text-align:center">192.168.204.141</td><td style="text-align:center">master1，node1</td></tr><tr><td style="text-align:center">backup</td><td style="text-align:center">centos7.8</td><td style="text-align:center">192.168.204.142</td><td style="text-align:center">master2，node2</td></tr><tr><td style="text-align:center">node</td><td style="text-align:center">centos7.8</td><td style="text-align:center">192.168.204.143</td><td style="text-align:center">master3，node3</td></tr></tbody></table><p>没有特殊说明，默认每台虚拟机都要操作</p><p>网站文档：<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p><h1 id="准备操作"><a class="markdownIt-Anchor" href="#准备操作"></a> 准备操作</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭防火墙</span>systemctl stop firewalld<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用，重启生效</span>systemctl disable firewalld <span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭</span>setenforce 0<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用，重启生效</span>sed -i &quot;s/enforcing/disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭</span>swapoff -a<span class="hljs-meta prompt_">#</span><span class="language-bash">永久关闭</span>sed -i &#x27;s/^[^#].*swap*/#&amp;/g&#x27; /etc/fstab<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装常用软件包</span>yum install vim net-tools lrzsz unzip dos2unix telnet sysstat iotop pciutils lsof tcpdump psmisc bc wget socat gcc tree chrony ntpdate mlocate -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机名写入hosts</span>cat &gt;&gt; /etc/hosts &lt;&lt; EOF192.168.204.141 master192.168.204.142 backup192.168.204.143 nodeEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机间配置ssh免密登录</span>ssh-keygen -t rsafor host in master backup node; do ssh-copy-id -i ~/.ssh/id_rsa.pub $host;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">内核开启网络支持</span>cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1net.ipv4.ip_nonlocal_bind = 1EOFmodprobe br_netfiltersysctl -p /etc/sysctl.d/kubernetes.conf</code></pre></div><h1 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装Docker</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官方脚本安装</span>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">手动yum安装</span><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载原有docker</span>yum remove docker*<span class="hljs-meta prompt_">#</span><span class="language-bash">安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</span>yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_">#</span><span class="language-bash">设置阿里源地址</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_">#</span><span class="language-bash">安装docker-ce</span>yum install docker-ce docker-ce-cli containerd.io -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置镜像加速地址,并修改Cgroup Driver(docker默认cgroupfs，k8s推荐使用systemd)</span>mkdir /etc/docker/ -pcat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn/&quot;],  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]&#125;EOFsystemctl daemon-reload<span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker并设置自启</span>for op in enable start status;do systemctl $op docker;done</code></pre></div><h1 id="master"><a class="markdownIt-Anchor" href="#master"></a> Master</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置k8s阿里源地址</span>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装k8s相关</span>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable --now kubelet</code></pre></div><h2 id="keepalived"><a class="markdownIt-Anchor" href="#keepalived"></a> keepalived</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装keeplived并备份配置⽂件</span>for host in master backup node;do ssh root@$host &quot;yum install -y keepalived&quot;;donefor host in master backup node;do ssh root@$host &quot;mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak&quot;;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改keepalived配置⽂件如下，标注的地⽅需要修改</span>cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; EOF! Configuration File for keepalivedglobal_defs &#123;    router_id master                        #标识，可⽤机器主机名作为标识&#125;vrrp_instance VI_1 &#123;    state MASTER                             #设置⻆⾊，第⼀个master为MASTER，剩余的节点均为BACKUP    interface ens32                         #设置vip绑定端⼝    virtual_router_id 51                     #让master和backup在同⼀个虚拟路由⾥，id号必须相同    priority 100                             #优先级,谁的优先级⾼谁就是master，值越⼤优先级越⾼    advert_int 1                             #⼼跳间隔时间    authentication &#123;        auth_type PASS                         #认证        auth_pass k8s                         #密码    &#125;     virtual_ipaddress &#123;        192.168.204.200                        #虚拟ip    &#125;&#125;EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">启动keepalived并设置开机⾃启</span>for op in enable start status;do systemctl $op keepalived;done</code></pre></div><h2 id="haproxy可以不装不装则不负载"><a class="markdownIt-Anchor" href="#haproxy可以不装不装则不负载"></a> haproxy(可以不装，不装则不负载)</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装haproxy并备份配置⽂件</span>for host in master backup node;do ssh root@$host &quot;yum install -y haproxy&quot;;donefor host in master backup node;do ssh root@$host &quot;mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak&quot;;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改haproxy配置⽂件如下，标注的地⽅需要修改</span>cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; EOFglobal        chroot /var/lib/haproxy        daemon        group haproxy        user haproxy        log 127.0.0.1:514 local0 warning        pidfile /var/lib/haproxy.pid        maxconn 20000        spread-checks 3        nbproc 8defaults        log global        mode tcp        retries 3        option redispatchlisten k8s-apiserver        bind 0.0.0.0:8443        mode tcp        balance roundrobin        timeout server 15s        timeout connect 15s        server k8sapiserver1 192.168.204.141:6443 check port 6443 inter 5000 fall 5        server k8sapiserver2 192.168.204.142:6443 check port 6443 inter 5000 fall 5        server k8sapiserver3 192.168.204.143:6443 check port 6443 inter 5000 fall 5EOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">启动haproxy并设置开机⾃启</span>for op in enable start status;do systemctl $op haproxy;done</code></pre></div><h1 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h1><h2 id="主master"><a class="markdownIt-Anchor" href="#主master"></a> 主Master</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化master</span>A:参数初始(可选参数较多，命令会比较长)kubeadm init \--apiserver-advertise-address=192.168.204.141 \--kubernetes-version v1.20.4 \--service-cidr=192.100.0.0/16 \--pod-network-cidr=192.244.0.0/16 \--control-plane-endpoint 192.168.204.200:8443 \--image-repository registry.cn-hangzhou.aliyuncs.com/google_containersB:配置文件初始(通过配置文件修改参数，复用性高，易修改)<span class="hljs-meta prompt_">#</span><span class="language-bash">导出默认配置文件</span>kubeadm config print init-defaults &gt; kubeadm-init.ymlvim kubeadm-init.yml//apiVersion: kubeadm.k8s.io/v1beta2bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef                        #token,默认值即可  ttl: 2400h0m0s                                         #token有效期，添加节点如果token过期需要重新⽣成  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.204.131                   #修改为本地主机IP  bindPort: 6443nodeRegistration:  criSocket: /var/run/dockershim.sock  name: master                                        #默认为本地主机名  taints:  - effect: NoSchedule    key: node-role.kubernetes.io/master---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrolPlaneEndpoint: &quot;192.168.204.200:8443&quot;                 #单master节点时这⾥写“本地真实IP:6443”；多master节点时写“VIP:端⼝”，端⼝要与haproxy配置中的bind字段的端⼝⼀致（如果没有装haproxy则仍然是6443）controllerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers     #镜像地址，默认为k8s地址，此处已修改为阿里云kind: ClusterConfigurationkubernetesVersion: v1.20.4                                    #指定k8s版本，可以通用kubectl version查看获取networking:  dnsDomain: cluster.local  podSubnet: 192.244.0.0/16                                    #指定Pod的⽹络范围  serviceSubnet: 192.100.0.0/16                                #指定Service的⽹络范围scheduler: &#123;&#125;//<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">预下载镜像</span>kubeadm config images pull --config kubeadm-init.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化</span>kubeadm init --config kubeadm-init.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置kubectl的config⽂件</span>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装flannel网络插件（k8s支持很多网络插件，此处以flannel为例）</span>cat &gt; /run/flannel/subnet.env &lt;&lt; EOFFLANNEL_NETWORK=10.244.0.0/16FLANNEL_SUBNET=10.244.0.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=trueEOFkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置命令补全</span>yum install -y bash-completionsource /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">切换默认命名空间</span>kubectl config set-context $(kubectl config current-context) --namespace=kube-system<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pod情况</span>kubectl get pod -o wide<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化失败或者反复可以重置</span>kubeadm reset<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">复制一下脚本内容</span>vim add_master.sh<span class="hljs-meta prompt_">#</span><span class="language-bash">/bin/bash</span>CONTROL_PLANE_IPS=&quot;backup node&quot;                                               #多个节点以空格隔开for host in $&#123;CONTROL_PLANE_IPS&#125;do ssh root@$&#123;host&#125; &quot;mkdir -p /etc/kubernetes/pki/etcd&quot; scp -r /etc/kubernetes/pki/ca.* root@$&#123;host&#125;:/etc/kubernetes/pki/ scp -r /etc/kubernetes/pki/sa.* root@$&#123;host&#125;:/etc/kubernetes/pki/ scp -r /etc/kubernetes/pki/front-proxy-ca.* root@$&#123;host&#125;:/etc/kubernetes/pki/ scp -r /etc/kubernetes/pki/etcd/ca.* root@$&#123;host&#125;:/etc/kubernetes/pki/etcd/ scp -r /etc/kubernetes/admin.conf root@$&#123;host&#125;:/etc/kubernetes/done<span class="hljs-meta prompt_">#</span><span class="language-bash">执行脚本，将证书信息传到其他副master</span>sh add_master.sh</code></pre></div><h2 id="副master"><a class="markdownIt-Anchor" href="#副master"></a> 副Master</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">加入进已经初始化的主master(此处命令在主master初始化会有)</span>kubeadm join 192.168.204.200:8443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:4159d86c40fea91f3b7a2669eb4ca0e927466928e7df0a901c11b40dfd766dda --control-plane<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置kubectl的config⽂件</span>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装flannel网络插件（k8s支持很多网络插件，此处以flannel为例）</span>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看节点情况（如果不安装网络插件，查看的STATUS会为NOT READY）</span>kubectl get nodesNAME     STATUS   ROLES                  AGE     VERSIONbackup   Ready    control-plane,master   9m53s   v1.20.4master   Ready    control-plane,master   32m     v1.20.4node     Ready    control-plane,master   4m20s   v1.20.4</code></pre></div><h2 id="设置为node"><a class="markdownIt-Anchor" href="#设置为node"></a> 设置为node</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看节点容忍，当前三个节点无法调用pod</span>kubectl describe node master |grep -E &#x27;(Role|Taint)&#x27;<span class="hljs-meta prompt_">#</span><span class="language-bash">取消污点后，master可以当作node</span>kubectl taint nodes master node-role.kubernetes.io/master-</code></pre></div><h2 id="token过期"><a class="markdownIt-Anchor" href="#token过期"></a> token过期</h2><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出token信息</span>kubeadm token list<span class="hljs-meta prompt_">#</span><span class="language-bash">创建新的token</span>kubeadm token create<span class="hljs-meta prompt_">#</span><span class="language-bash">获取ca证书sha256编码<span class="hljs-built_in">hash</span>值</span>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;<span class="hljs-meta prompt_">#</span><span class="language-bash">生成新token和获取<span class="hljs-built_in">hash</span>后放入之前的<span class="hljs-built_in">join</span>命令重新拼接执行</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>K8S</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过Kubeadm部署Kubernetes单主多从集群</title>
    <link href="/study/kubernetes/Kubeadm-Deploy-Master-Kubernetes/"/>
    <url>/study/kubernetes/Kubeadm-Deploy-Master-Kubernetes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="学习环境"><a class="markdownIt-Anchor" href="#学习环境"></a> 学习环境</h1><p>vmware安装三台虚拟机，或者先安装一台，完成下面的准备操作后克隆两台虚拟机，再修改IP；主机名可以在安装时候设置，或者装完之后通过hostnamectl set-hostname修改；</p><table><thead><tr><th style="text-align:center">hostname</th><th style="text-align:center">os</th><th style="text-align:center">static ip</th><th style="text-align:center">role</th></tr></thead><tbody><tr><td style="text-align:center">master</td><td style="text-align:center">centos7.6</td><td style="text-align:center">192.168.204.131</td><td style="text-align:center">master</td></tr><tr><td style="text-align:center">minion</td><td style="text-align:center">centos7.6</td><td style="text-align:center">192.168.204.132</td><td style="text-align:center">node1</td></tr><tr><td style="text-align:center">slave</td><td style="text-align:center">centos7.6</td><td style="text-align:center">192.168.204.133</td><td style="text-align:center">node2</td></tr></tbody></table><p>没有特殊说明，默认每台虚拟机都要操作；</p><p>网站文档：<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/%EF%BC%9B">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/；</a></p><h1 id="准备操作"><a class="markdownIt-Anchor" href="#准备操作"></a> 准备操作</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭</span>systemctl stop firewalld<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用，重启生效</span>systemctl disable firewalld<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭</span>setenforce 0<span class="hljs-meta prompt_">#</span><span class="language-bash">禁用,重启生效</span>sed -i &quot;s/enforcing/disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭</span>swapoff -a<span class="hljs-meta prompt_">#</span><span class="language-bash">永久关闭</span>sed -i &#x27;s/^[^#].*swap*/#&amp;/g&#x27; /etc/fstab<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装常用软件包</span>yum install vim net-tools lrzsz unzip dos2unix telnet sysstat iotop pciutils lsof tcpdump psmisc bc wget socat gcc tree chrony ntpdate mlocate -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机名写入hosts</span>cat &gt;&gt; /etc/hosts &lt;&lt; EOF192.168.204.131 master192.168.204.132 minion192.168.204.133 slaveEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">主机间配置ssh免密登录</span>ssh-keygen -t rsafor host in master minion slave; do ssh-copy-id -i ~/.ssh/id_rsa.pub $host;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">内核开启网络支持</span>cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1net.ipv4.ip_nonlocal_bind = 1EOFmodprobe br_netfiltersysctl -p /etc/sysctl.d/kubernetes.conf</code></pre></div><h1 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">官方脚本安装</span>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">手动yum安装</span><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载原有docker</span>yum remove docker*<span class="hljs-meta prompt_">#</span><span class="language-bash">安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</span>yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_">#</span><span class="language-bash">设置阿里源地址</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_">#</span><span class="language-bash">安装</span>yum install docker-ce docker-ce-cli containerd.io -y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置镜像加速地址,并修改Cgroup Driver(docker默认cgroupfs，k8s推荐使用systemd)</span>mkdir /etc/docker -pcat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn/&quot;],  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]&#125;EOFsystemctl daemon-reload<span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker并设置自启</span>for op in enable start status;do systemctl $op docker;done</code></pre></div><h1 id="master"><a class="markdownIt-Anchor" href="#master"></a> Master</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置k8s阿里源地址</span>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装k8s相关</span>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable --now kubelet<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化master</span>A:参数初始(可选参数较多，命令会比较长)kubeadm init \--apiserver-advertise-address=192.168.204.131 \--kubernetes-version v1.20.4 \--service-cidr=192.100.0.0/16 \--pod-network-cidr=192.244.0.0/16 \--control-plane-endpoint 192.168.204.200:8443 \--image-repository registry.cn-hangzhou.aliyuncs.com/google_containersB:配置文件初始(通过配置文件修改参数，复用性高，易修改)<span class="hljs-meta prompt_">#</span><span class="language-bash">导出默认配置文件</span>kubeadm config print init-defaults &gt; kubeadm-init.ymlvim kubeadm-init.yml//apiVersion: kubeadm.k8s.io/v1beta2bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef                        #token,默认值即可  ttl: 2400h0m0s                                         #token有效期，添加节点如果token过期需要重新⽣成  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.204.131                   #修改为本地主机IP  bindPort: 6443nodeRegistration:  criSocket: /var/run/dockershim.sock  name: master                                        #默认为本地主机名  taints:  - effect: NoSchedule    key: node-role.kubernetes.io/master---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrolPlaneEndpoint: &quot;192.168.204.131:6443&quot;                 #单master节点时这⾥写“本地真实IP:6443”；多master节点时写“VIP:端⼝”，端⼝要与haproxy配置中的bind字段的端⼝⼀致controllerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers    #镜像地址，默认为k8s地址，此处已修改为阿里云kind: ClusterConfigurationkubernetesVersion: v1.20.4                                    #指定k8s版本，可以通用kubectl version查看获取networking:  dnsDomain: cluster.local  podSubnet: 192.244.0.0/16                                    #指定Pod的⽹络范围                          serviceSubnet: 192.100.0.0/16                                #指定Service的⽹络范围scheduler: &#123;&#125;//<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">预下载镜像</span>kubeadm config images pull --config kubeadm-init.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化</span>kubeadm init --config kubeadm-init.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置kubectl的config⽂件(此处命令在master初始化会有)</span>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装flannel网络插件（k8s支持很多网络插件，此处以flannel为例）</span>cat &gt; /run/flannel/subnet.env &lt;&lt; EOFFLANNEL_NETWORK=10.244.0.0/16FLANNEL_SUBNET=10.244.0.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=trueEOFkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">配置命令补全</span>yum install -y bash-completionsource /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">切换默认命名空间</span>kubectl config set-context $(kubectl config current-context) --namespace=kube-system<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pod情况</span>kubectl get pod -o wide<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化失败或者反复可以重置</span>kubeadm reset</code></pre></div><h1 id="nodes"><a class="markdownIt-Anchor" href="#nodes"></a> Nodes</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置k8s阿里源地址</span>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">安装k8s相关</span>yum install -y kubelet kubeadm --disableexcludes=kubernetes<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">启动kubelet并设置自启</span>for op in enable start status;do systemctl $op kubelet;done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">加入nodes(此处命令在master初始化会有)</span>kubeadm join 192.168.204.131:6443 --token abcdef.0123456789abcdef    --discovery-token-ca-cert-hash sha256:724d623dc0cde1d350ebea86b6a583c3221a2bdef735db804b145eac751037b0<span class="hljs-meta prompt_">#</span><span class="language-bash">如果忘记通过以下命令查看</span>kubeadm token create --print-join-command<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">node节点<span class="hljs-built_in">join</span>之后，可以在master查看节点情况（如果不安装网络插件，查看的STATUS会为NOT READY）</span>kubectl get nodesNAME     STATUS   ROLES                  AGE     VERSIONmaster   Ready    control-plane,master   32m     v1.20.4minion   Ready    &lt;none&gt;                   9m      v1.20.4slave    Ready    &lt;none&gt;                4m20s   v1.20.4</code></pre></div><h1 id="安装dashboardmaster"><a class="markdownIt-Anchor" href="#安装dashboardmaster"></a> 安装dashboard（Master）</h1><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载默认yaml文件</span>wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta4/aio/deploy/recommended.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">修改yaml</span>vim recommended.yaml修改NodePort //kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  type: NodePort                              #默认没有，添加  ports:    - port: 443      targetPort: 8443      nodePort: 30001                        #默认没有，添加，30001为自定义端口  selector:    k8s-app: kubernetes-dashboard//<span class="hljs-meta prompt_">#</span><span class="language-bash">启动dashboard，执行命令之后可以稍微等一会</span>kubectl apply -f recommended.yaml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看dashboard的pod</span>kubectl get pod -n kubernetes-dashboard | grep dashboard<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">生成证书</span>openssl genrsa -out dashboard.key 2048 openssl req -new -out dashboard.csr -key dashboard.key -subj &#x27;/CN=192.168.204.131&#x27;openssl x509 -req -days 3650 -in dashboard.csr -signkey dashboard.key -out dashboard.crt<span class="hljs-meta prompt_">#</span><span class="language-bash">删除原有证书</span>kubectl delete secret kubernetes-dashboard-certs -n kubernetes-dashboard<span class="hljs-meta prompt_">#</span><span class="language-bash">通过新生成的证书创建secret</span>kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard<span class="hljs-meta prompt_">#</span><span class="language-bash">删除原有pod即可（会自动创建新的pod）</span>kubectl delete pod &lt;pod name&gt; -n kubernetes-dashboard<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">给所有namespace授权</span>kubectl create serviceaccount dashboard-serviceaccount -n kubernetes-dashboard<span class="hljs-meta prompt_">#</span><span class="language-bash">创建clusterrolebinding</span>kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-serviceaccount<span class="hljs-meta prompt_">#</span><span class="language-bash">获取token</span>kubectl get secret -n kubernetes-dashboard | grep dashboard-serviceaccount-tokenkubectl describe secret &lt;secret name&gt;访问https://IP:之前自定义的端口,输入上一步获取的token即可登录看到相关信息</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
      <category>K8S</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>分類</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>相冊</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="mucy"><a class="markdownIt-Anchor" href="#mucy"></a> Mucy</h1><h1 id="live"><a class="markdownIt-Anchor" href="#live"></a> Live</h1>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>關於</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div style="text-align: center"><p>無錫卅年土著<br />平時喜好讀書<br />跟隨貓咪腳步<br />生活並不孤獨</p><p>玩過一陣鋼筆<br />燒過兩年耳機<br />追過livehouse<br />去過酒吧蹦迪</p><p>最近沉迷鍵盤<br />間中買買模玩<br />深愛香港樂壇<br />週末遠足登山</p></div><p>    博客的95%終於搭好了，剩下的5%估計又要拖延……</p><p>    至於搭博客的原因：一部分是最近比較閑，有時間可以玩一玩，看到大佬都有自己的博客，也隨調研了一下各個開源框架，最終敲定了Hexo——相比較其它傻瓜式操作，Hexo顯得比較硬核，能體現出我是個搞技術的；其次是足夠成熟，用的人也多，有問題容易解決；再就是有花里胡哨的主題，一年365天一天換一套都不是問題。畢竟人嘛，總是會厭的，一天換一套太麻煩的話，一個月換一套也行。</p><p>    二來，就是確確實實想留下一點不能説毫無價值只能説意義不大的東西：前面説了，我是個搞技術的，搞技術的總得有筆記和文章證明吧，不然空口無憑誰信啊？以後換工作，給人貼GitHub Page地址也能順便瞭解一下我的實力；除了技術和學習相關的 ，也趁這個機會把平日偶爾寫的，記錄生活或者評論感想的細碎東西整理在一起，給大型同性別交友平臺GitHub托管我也比較放心。</p><p>    博客的名稱既然是Mucy’s Live，那當然要放些mucy和live的照片——只不過，得等我搞定了圖床再説，這就是開始説的5%中的部分内容啦。</p><p>    先到這裏，溜了溜了……</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>2023の歌</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-yPZnuXgY" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="8006753638" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="500px" data-preload="auto" data-theme="#ad7a86" data-loop="all" data-order="random"    ></div>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>標簽</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
  </entry>
  
  
  
</search>
